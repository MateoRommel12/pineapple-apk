{"ast":null,"code":"export async function requestAsync(requestUrl, fetchRequest) {\n  const url = new URL(requestUrl);\n  const request = {\n    method: fetchRequest.method,\n    mode: 'cors',\n    headers: {}\n  };\n  const isJsonDataType = fetchRequest.dataType?.toLowerCase() === 'json';\n  if (fetchRequest.headers) {\n    for (const i in fetchRequest.headers) {\n      if (i in fetchRequest.headers) {\n        request.headers[i] = fetchRequest.headers[i];\n      }\n    }\n  }\n  if (fetchRequest.body) {\n    if (fetchRequest.method?.toUpperCase() === 'POST') {\n      request.body = new URLSearchParams(fetchRequest.body).toString();\n    } else {\n      for (const key of Object.keys(fetchRequest.body)) {\n        url.searchParams.append(key, fetchRequest.body[key]);\n      }\n    }\n  }\n  if (isJsonDataType && !('Accept' in request.headers)) {\n    request.headers['Accept'] = 'application/json, text/javascript; q=0.01';\n  }\n  const correctedUrl = url.toString().replace(/\\/$/, '');\n  const response = await fetch(correctedUrl, request);\n  const contentType = response.headers.get('content-type');\n  if (isJsonDataType || contentType?.includes('application/json')) {\n    return response.json();\n  }\n  return response.text();\n}","map":{"version":3,"names":["requestAsync","requestUrl","fetchRequest","url","URL","request","method","mode","headers","isJsonDataType","dataType","toLowerCase","i","body","toUpperCase","URLSearchParams","toString","key","Object","keys","searchParams","append","correctedUrl","replace","response","fetch","contentType","get","includes","json","text"],"sources":["C:\\Users\\ACER\\Documents\\Capstone\\node_modules\\expo-auth-session\\src\\Fetch.ts"],"sourcesContent":["export type Headers = Record<string, string> & {\n  'Content-Type': string;\n  Authorization?: string;\n  Accept?: string;\n};\n\nexport type FetchRequest = {\n  headers?: Headers;\n  body?: Record<string, string>;\n  dataType?: string;\n  method?: string;\n};\n\nexport async function requestAsync<T>(requestUrl: string, fetchRequest: FetchRequest): Promise<T> {\n  const url = new URL(requestUrl);\n\n  const request: Omit<RequestInit, 'headers'> & { headers: HeadersInit } = {\n    method: fetchRequest.method,\n    mode: 'cors',\n    headers: {},\n  };\n\n  const isJsonDataType = fetchRequest.dataType?.toLowerCase() === 'json';\n\n  if (fetchRequest.headers) {\n    for (const i in fetchRequest.headers) {\n      if (i in fetchRequest.headers) {\n        request.headers[i] = fetchRequest.headers[i] as string;\n      }\n    }\n  }\n\n  if (fetchRequest.body) {\n    if (fetchRequest.method?.toUpperCase() === 'POST') {\n      request.body = new URLSearchParams(fetchRequest.body).toString();\n    } else {\n      for (const key of Object.keys(fetchRequest.body)) {\n        url.searchParams.append(key, fetchRequest.body[key]);\n      }\n    }\n  }\n\n  if (isJsonDataType && !('Accept' in request.headers)) {\n    // NOTE: Github authentication will return XML if this includes the standard `*/*`\n    request.headers['Accept'] = 'application/json, text/javascript; q=0.01';\n  }\n\n  // Fix a problem with React Native `URL` causing a trailing slash to be added.\n  const correctedUrl = url.toString().replace(/\\/$/, '');\n\n  const response = await fetch(correctedUrl, request);\n\n  const contentType = response.headers.get('content-type');\n  if (isJsonDataType || contentType?.includes('application/json')) {\n    return response.json();\n  }\n  // @ts-ignore: Type 'string' is not assignable to type 'T'.\n  return response.text();\n}\n"],"mappings":"AAaA,OAAO,eAAeA,YAAYA,CAAIC,UAAkB,EAAEC,YAA0B;EAClF,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAACH,UAAU,CAAC;EAE/B,MAAMI,OAAO,GAA4D;IACvEC,MAAM,EAAEJ,YAAY,CAACI,MAAM;IAC3BC,IAAI,EAAE,MAAM;IACZC,OAAO,EAAE;GACV;EAED,MAAMC,cAAc,GAAGP,YAAY,CAACQ,QAAQ,EAAEC,WAAW,EAAE,KAAK,MAAM;EAEtE,IAAIT,YAAY,CAACM,OAAO,EAAE;IACxB,KAAK,MAAMI,CAAC,IAAIV,YAAY,CAACM,OAAO,EAAE;MACpC,IAAII,CAAC,IAAIV,YAAY,CAACM,OAAO,EAAE;QAC7BH,OAAO,CAACG,OAAO,CAACI,CAAC,CAAC,GAAGV,YAAY,CAACM,OAAO,CAACI,CAAC,CAAW;;;;EAK5D,IAAIV,YAAY,CAACW,IAAI,EAAE;IACrB,IAAIX,YAAY,CAACI,MAAM,EAAEQ,WAAW,EAAE,KAAK,MAAM,EAAE;MACjDT,OAAO,CAACQ,IAAI,GAAG,IAAIE,eAAe,CAACb,YAAY,CAACW,IAAI,CAAC,CAACG,QAAQ,EAAE;KACjE,MAAM;MACL,KAAK,MAAMC,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACjB,YAAY,CAACW,IAAI,CAAC,EAAE;QAChDV,GAAG,CAACiB,YAAY,CAACC,MAAM,CAACJ,GAAG,EAAEf,YAAY,CAACW,IAAI,CAACI,GAAG,CAAC,CAAC;;;;EAK1D,IAAIR,cAAc,IAAI,EAAE,QAAQ,IAAIJ,OAAO,CAACG,OAAO,CAAC,EAAE;IAEpDH,OAAO,CAACG,OAAO,CAAC,QAAQ,CAAC,GAAG,2CAA2C;;EAIzE,MAAMc,YAAY,GAAGnB,GAAG,CAACa,QAAQ,EAAE,CAACO,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EAEtD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,YAAY,EAAEjB,OAAO,CAAC;EAEnD,MAAMqB,WAAW,GAAGF,QAAQ,CAAChB,OAAO,CAACmB,GAAG,CAAC,cAAc,CAAC;EACxD,IAAIlB,cAAc,IAAIiB,WAAW,EAAEE,QAAQ,CAAC,kBAAkB,CAAC,EAAE;IAC/D,OAAOJ,QAAQ,CAACK,IAAI,EAAE;;EAGxB,OAAOL,QAAQ,CAACM,IAAI,EAAE;AACxB","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}