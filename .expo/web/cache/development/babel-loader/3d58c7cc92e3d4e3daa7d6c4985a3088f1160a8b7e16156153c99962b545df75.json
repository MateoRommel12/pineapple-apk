{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\ACER\\\\Documents\\\\Capstone\\\\context\\\\AuthContext.tsx\";\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport * as WebBrowser from \"expo-web-browser\";\nimport * as Google from \"expo-auth-session/providers/google\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport * as AuthSession from \"expo-auth-session\";\nimport auth from '@react-native-firebase/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nWebBrowser.maybeCompleteAuthSession();\nconst EXPO_CLIENT_ID = \"265539253245-2scb65cqia6kh719j3pleskrem72t8i0.apps.googleusercontent.com\";\nconst ANDROID_CLIENT_ID = \"265539253245-2scb65cqia6kh719j3pleskrem72t8i0.apps.googleusercontent.com\";\nconst redirectUri = AuthSession.makeRedirectUri({\n  scheme: \"pineapplesweetness\",\n  path: \"redirect\"\n});\nconsole.log(\"Redirect URI being used:\", redirectUri);\nconst AuthContext = createContext(undefined);\nexport function AuthProvider({\n  children\n}) {\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [request, response, promptAsync] = Google.useAuthRequest({\n    androidClientId: ANDROID_CLIENT_ID,\n    clientId: EXPO_CLIENT_ID,\n    scopes: ['profile', 'email'],\n    redirectUri,\n    responseType: \"token\",\n    extraParams: {\n      prompt: 'select_account'\n    }\n  });\n  useEffect(() => {\n    const unsubscribe = auth().onAuthStateChanged(firebaseUser => {\n      if (firebaseUser) {\n        setUser({\n          id: firebaseUser.uid,\n          name: firebaseUser.displayName || '',\n          email: firebaseUser.email || '',\n          photoUrl: firebaseUser.photoURL || ''\n        });\n      } else {\n        setUser(null);\n      }\n      setIsLoading(false);\n    });\n    return unsubscribe;\n  }, []);\n  useEffect(() => {\n    if (response?.type === \"success\") {\n      const {\n        accessToken\n      } = response.authentication || {};\n      if (accessToken) {\n        signInWithFirebase(accessToken);\n      }\n    }\n  }, [response]);\n  const signInWithGoogle = async () => {\n    try {\n      console.log(\"Starting Google Sign In...\");\n      console.log(\"Request object:\", request);\n      const result = await promptAsync();\n      console.log(\"Sign in result:\", result);\n    } catch (error) {\n      console.error(\"Firebase sign in error:\", error);\n    }\n  };\n  const signInWithFirebase = async accessToken => {\n    try {\n      const googleCredential = auth.GoogleAuthProvider.credential(accessToken);\n      const userCredential = await auth().signInWithCredential(googleCredential);\n      console.log(\"Firebase sign in successful\", userCredential.user);\n    } catch (error) {\n      console.error(\"Firebase sign in error:\", error);\n    }\n  };\n  const signOut = async () => {\n    try {\n      await auth().signOut();\n      await AsyncStorage.removeItem(\"@user\");\n      setUser(null);\n    } catch (error) {\n      console.error(\"Error signing out:\", error);\n    }\n  };\n  return _jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isLoading,\n      signInWithGoogle: signInWithGoogle,\n      signOut\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}","map":{"version":3,"names":["_jsxFileName","createContext","useContext","useState","useEffect","WebBrowser","Google","AsyncStorage","AuthSession","auth","jsxDEV","_jsxDEV","maybeCompleteAuthSession","EXPO_CLIENT_ID","ANDROID_CLIENT_ID","redirectUri","makeRedirectUri","scheme","path","console","log","AuthContext","undefined","AuthProvider","children","user","setUser","isLoading","setIsLoading","request","response","promptAsync","useAuthRequest","androidClientId","clientId","scopes","responseType","extraParams","prompt","unsubscribe","onAuthStateChanged","firebaseUser","id","uid","name","displayName","email","photoUrl","photoURL","type","accessToken","authentication","signInWithFirebase","signInWithGoogle","result","error","googleCredential","GoogleAuthProvider","credential","userCredential","signInWithCredential","signOut","removeItem","Provider","value","fileName","lineNumber","columnNumber","useAuth","context","Error"],"sources":["C:/Users/ACER/Documents/Capstone/context/AuthContext.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport { createContext, useContext, useState, useEffect, type ReactNode } from \"react\"\r\nimport * as WebBrowser from \"expo-web-browser\"\r\nimport * as Google from \"expo-auth-session/providers/google\"\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\"\r\nimport * as AuthSession from \"expo-auth-session\"\r\nimport auth, { FirebaseAuthTypes } from '@react-native-firebase/auth'\r\n\r\n// Ensure web browser redirect is handled properly\r\nWebBrowser.maybeCompleteAuthSession()\r\n\r\n// Replace with your own Google OAuth credentials\r\nconst EXPO_CLIENT_ID = \"265539253245-2scb65cqia6kh719j3pleskrem72t8i0.apps.googleusercontent.com\"\r\nconst ANDROID_CLIENT_ID = \"265539253245-2scb65cqia6kh719j3pleskrem72t8i0.apps.googleusercontent.com\"\r\n\r\n// Configure redirect URI\r\nconst redirectUri = AuthSession.makeRedirectUri({\r\n  scheme: \"pineapplesweetness\",\r\n  path: \"redirect\"\r\n});\r\n\r\n// Log the redirect URI for debugging\r\nconsole.log(\"Redirect URI being used:\", redirectUri);\r\n\r\n// User type definition\r\ntype User = {\r\n  id: string\r\n  name: string\r\n  email: string\r\n  photoUrl: string\r\n} | null\r\n\r\n// Auth context type\r\ntype AuthContextType = {\r\n  user: User\r\n  isLoading: boolean\r\n  signInWithGoogle: () => Promise<void>\r\n  signOut: () => Promise<void>\r\n}\r\n\r\n// Create the context\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined)\r\n\r\n// Auth provider component\r\nexport function AuthProvider({ children }: { children: ReactNode }) {\r\n  const [user, setUser] = useState<User>(null)\r\n  const [isLoading, setIsLoading] = useState(true)\r\n\r\n  // Set up Google OAuth\r\n  const [request, response, promptAsync] = Google.useAuthRequest({\r\n    androidClientId: ANDROID_CLIENT_ID,\r\n    clientId: EXPO_CLIENT_ID,\r\n    scopes: ['profile', 'email'],\r\n    redirectUri,\r\n    responseType: \"token\",\r\n    extraParams: {\r\n      prompt: 'select_account'\r\n    }\r\n  })\r\n\r\n  // Check for Firebase auth state changes\r\n  useEffect(() => {\r\n    const unsubscribe = auth().onAuthStateChanged((firebaseUser: FirebaseAuthTypes.User | null) => {\r\n      if (firebaseUser) {\r\n        setUser({\r\n          id: firebaseUser.uid,\r\n          name: firebaseUser.displayName || '',\r\n          email: firebaseUser.email || '',\r\n          photoUrl: firebaseUser.photoURL || '',\r\n        });\r\n      } else {\r\n        setUser(null);\r\n      }\r\n      setIsLoading(false);\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  // Handle authentication response\r\n  useEffect(() => {\r\n    if (response?.type === \"success\") {\r\n      const { accessToken } = response.authentication || {};\r\n      if (accessToken) {\r\n        signInWithFirebase(accessToken);\r\n      }\r\n    }\r\n  }, [response]);\r\n\r\n  // Sign in with Google\r\n  const signInWithGoogle = async () => {\r\n    try {\r\n      console.log(\"Starting Google Sign In...\");\r\n      console.log(\"Request object:\", request);\r\n      const result = await promptAsync();\r\n      console.log(\"Sign in result:\", result);\r\n    } catch (error) {\r\n      console.error(\"Firebase sign in error:\", error);\r\n    }\r\n  };\r\n\r\n  // Sign in with Firebase using Google token\r\n  const signInWithFirebase = async (accessToken: string) => {\r\n    try {\r\n      // Create a Google credential\r\n      const googleCredential = auth.GoogleAuthProvider.credential(accessToken);\r\n      \r\n      // Sign in to Firebase with the Google credential\r\n      const userCredential = await auth().signInWithCredential(googleCredential);\r\n      console.log(\"Firebase sign in successful\", userCredential.user);\r\n    } catch (error) {\r\n      console.error(\"Firebase sign in error:\", error);\r\n    }\r\n  };\r\n\r\n  // Sign out from both Google and Firebase\r\n  const signOut = async () => {\r\n    try {\r\n      await auth().signOut();\r\n      await AsyncStorage.removeItem(\"@user\");\r\n      setUser(null);\r\n    } catch (error) {\r\n      console.error(\"Error signing out:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user,\r\n        isLoading,\r\n        signInWithGoogle: signInWithGoogle,\r\n        signOut,\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  )\r\n}\r\n\r\n// Custom hook to use auth context\r\nexport function useAuth() {\r\n  const context = useContext(AuthContext)\r\n  if (context === undefined) {\r\n    throw new Error(\"useAuth must be used within an AuthProvider\")\r\n  }\r\n  return context\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}