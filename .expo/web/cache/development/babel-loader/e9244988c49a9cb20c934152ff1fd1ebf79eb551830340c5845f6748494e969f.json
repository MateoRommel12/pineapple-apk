{"ast":null,"code":"const providerId = 'phone';\nexport default class PhoneAuthProvider {\n  constructor(auth) {\n    if (auth === undefined) {\n      throw new Error('`new PhoneAuthProvider()` is not supported on the native Firebase SDKs.');\n    }\n    this._auth = auth;\n  }\n  static get PROVIDER_ID() {\n    return providerId;\n  }\n  static credential(verificationId, code) {\n    return {\n      token: verificationId,\n      secret: code,\n      providerId\n    };\n  }\n  verifyPhoneNumber(phoneInfoOptions, appVerifier) {\n    if (phoneInfoOptions.multiFactorHint) {\n      return this._auth.app.auth().verifyPhoneNumberWithMultiFactorInfo(phoneInfoOptions.multiFactorHint, phoneInfoOptions.session);\n    }\n    return this._auth.app.auth().verifyPhoneNumberForMultiFactor(phoneInfoOptions);\n  }\n}","map":{"version":3,"names":["providerId","PhoneAuthProvider","constructor","auth","undefined","Error","_auth","PROVIDER_ID","credential","verificationId","code","token","secret","verifyPhoneNumber","phoneInfoOptions","appVerifier","multiFactorHint","app","verifyPhoneNumberWithMultiFactorInfo","session","verifyPhoneNumberForMultiFactor"],"sources":["C:/Users/ACER/Documents/Capstone/node_modules/@react-native-firebase/auth/lib/providers/PhoneAuthProvider.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\n/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nconst providerId = 'phone';\n\nexport default class PhoneAuthProvider {\n  constructor(auth) {\n    if (auth === undefined) {\n      throw new Error('`new PhoneAuthProvider()` is not supported on the native Firebase SDKs.');\n    }\n    this._auth = auth;\n  }\n\n  static get PROVIDER_ID() {\n    return providerId;\n  }\n\n  static credential(verificationId, code) {\n    return {\n      token: verificationId,\n      secret: code,\n      providerId,\n    };\n  }\n\n  verifyPhoneNumber(phoneInfoOptions, appVerifier) {\n    if (phoneInfoOptions.multiFactorHint) {\n      return this._auth.app\n        .auth()\n        .verifyPhoneNumberWithMultiFactorInfo(\n          phoneInfoOptions.multiFactorHint,\n          phoneInfoOptions.session,\n        );\n    }\n    return this._auth.app.auth().verifyPhoneNumberForMultiFactor(phoneInfoOptions);\n  }\n}\n"],"mappings":"AAkBA,MAAMA,UAAU,GAAG,OAAO;AAE1B,eAAe,MAAMC,iBAAiB,CAAC;EACrCC,WAAWA,CAACC,IAAI,EAAE;IAChB,IAAIA,IAAI,KAAKC,SAAS,EAAE;MACtB,MAAM,IAAIC,KAAK,CAAC,yEAAyE,CAAC;IAC5F;IACA,IAAI,CAACC,KAAK,GAAGH,IAAI;EACnB;EAEA,WAAWI,WAAWA,CAAA,EAAG;IACvB,OAAOP,UAAU;EACnB;EAEA,OAAOQ,UAAUA,CAACC,cAAc,EAAEC,IAAI,EAAE;IACtC,OAAO;MACLC,KAAK,EAAEF,cAAc;MACrBG,MAAM,EAAEF,IAAI;MACZV;IACF,CAAC;EACH;EAEAa,iBAAiBA,CAACC,gBAAgB,EAAEC,WAAW,EAAE;IAC/C,IAAID,gBAAgB,CAACE,eAAe,EAAE;MACpC,OAAO,IAAI,CAACV,KAAK,CAACW,GAAG,CAClBd,IAAI,CAAC,CAAC,CACNe,oCAAoC,CACnCJ,gBAAgB,CAACE,eAAe,EAChCF,gBAAgB,CAACK,OACnB,CAAC;IACL;IACA,OAAO,IAAI,CAACb,KAAK,CAACW,GAAG,CAACd,IAAI,CAAC,CAAC,CAACiB,+BAA+B,CAACN,gBAAgB,CAAC;EAChF;AACF","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}