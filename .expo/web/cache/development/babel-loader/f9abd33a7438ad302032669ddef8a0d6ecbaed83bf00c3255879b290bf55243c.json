{"ast":null,"code":"import * as Crypto from 'expo-crypto';\nimport invariant from 'invariant';\nconst CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\nfunction convertBufferToString(buffer) {\n  const state = [];\n  for (let i = 0; i < buffer.byteLength; i += 1) {\n    const index = buffer[i] % CHARSET.length;\n    state.push(CHARSET[index]);\n  }\n  return state.join('');\n}\nfunction convertToUrlSafeString(b64) {\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\nexport function generateRandom(size) {\n  const buffer = Crypto.getRandomValues(new Uint8Array(size));\n  return convertBufferToString(buffer);\n}\nexport async function deriveChallengeAsync(code) {\n  invariant(code.length > 42 && code.length < 129, 'Invalid code length for PKCE.');\n  const buffer = await Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256, code, {\n    encoding: Crypto.CryptoEncoding.BASE64\n  });\n  return convertToUrlSafeString(buffer);\n}\nexport async function buildCodeAsync(size = 128) {\n  const codeVerifier = generateRandom(size);\n  const codeChallenge = await deriveChallengeAsync(codeVerifier);\n  return {\n    codeVerifier,\n    codeChallenge\n  };\n}\nexport async function generateHexStringAsync(size) {\n  const value = generateRandom(size);\n  const buffer = await Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256, value, {\n    encoding: Crypto.CryptoEncoding.HEX\n  });\n  return convertToUrlSafeString(buffer);\n}","map":{"version":3,"names":["Crypto","invariant","CHARSET","convertBufferToString","buffer","state","i","byteLength","index","length","push","join","convertToUrlSafeString","b64","replace","generateRandom","size","getRandomValues","Uint8Array","deriveChallengeAsync","code","digestStringAsync","CryptoDigestAlgorithm","SHA256","encoding","CryptoEncoding","BASE64","buildCodeAsync","codeVerifier","codeChallenge","generateHexStringAsync","value","HEX"],"sources":["C:\\Users\\ACER\\Documents\\Capstone\\node_modules\\expo-auth-session\\src\\PKCE.ts"],"sourcesContent":["import * as Crypto from 'expo-crypto';\nimport invariant from 'invariant';\n\nconst CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\nfunction convertBufferToString(buffer: Uint8Array): string {\n  const state: string[] = [];\n  for (let i = 0; i < buffer.byteLength; i += 1) {\n    const index = buffer[i] % CHARSET.length;\n    state.push(CHARSET[index]);\n  }\n  return state.join('');\n}\n\nfunction convertToUrlSafeString(b64: string): string {\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n\nexport function generateRandom(size: number): string {\n  const buffer = Crypto.getRandomValues(new Uint8Array(size));\n  return convertBufferToString(buffer);\n}\n\n/**\n * Proof key for Code Exchange by OAuth Public Clients (RFC 7636), Section 4.1\n * [Section 4.1](https://tools.ietf.org/html/rfc7636#section-4.1)\n */\nexport async function deriveChallengeAsync(code: string): Promise<string> {\n  // 43 is the minimum, and 128 is the maximum.\n  invariant(code.length > 42 && code.length < 129, 'Invalid code length for PKCE.');\n\n  const buffer = await Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256, code, {\n    encoding: Crypto.CryptoEncoding.BASE64,\n  });\n  return convertToUrlSafeString(buffer);\n}\n\nexport async function buildCodeAsync(\n  size: number = 128\n): Promise<{ codeChallenge: string; codeVerifier: string }> {\n  // This method needs to be resolved like all other native methods.\n  const codeVerifier = generateRandom(size);\n  const codeChallenge = await deriveChallengeAsync(codeVerifier);\n\n  return { codeVerifier, codeChallenge };\n}\n\n/**\n * Digest a random string with hex encoding, useful for creating `nonce`s.\n */\nexport async function generateHexStringAsync(size: number): Promise<string> {\n  const value = generateRandom(size);\n  const buffer = await Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256, value, {\n    encoding: Crypto.CryptoEncoding.HEX,\n  });\n  return convertToUrlSafeString(buffer);\n}\n"],"mappings":"AAAA,OAAO,KAAKA,MAAM,MAAM,aAAa;AACrC,OAAOC,SAAS,MAAM,WAAW;AAEjC,MAAMC,OAAO,GAAG,gEAAgE;AAEhF,SAASC,qBAAqBA,CAACC,MAAkB;EAC/C,MAAMC,KAAK,GAAa,EAAE;EAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,MAAM,CAACG,UAAU,EAAED,CAAC,IAAI,CAAC,EAAE;IAC7C,MAAME,KAAK,GAAGJ,MAAM,CAACE,CAAC,CAAC,GAAGJ,OAAO,CAACO,MAAM;IACxCJ,KAAK,CAACK,IAAI,CAACR,OAAO,CAACM,KAAK,CAAC,CAAC;;EAE5B,OAAOH,KAAK,CAACM,IAAI,CAAC,EAAE,CAAC;AACvB;AAEA,SAASC,sBAAsBA,CAACC,GAAW;EACzC,OAAOA,GAAG,CAACC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;AACtE;AAEA,OAAM,SAAUC,cAAcA,CAACC,IAAY;EACzC,MAAMZ,MAAM,GAAGJ,MAAM,CAACiB,eAAe,CAAC,IAAIC,UAAU,CAACF,IAAI,CAAC,CAAC;EAC3D,OAAOb,qBAAqB,CAACC,MAAM,CAAC;AACtC;AAMA,OAAO,eAAee,oBAAoBA,CAACC,IAAY;EAErDnB,SAAS,CAACmB,IAAI,CAACX,MAAM,GAAG,EAAE,IAAIW,IAAI,CAACX,MAAM,GAAG,GAAG,EAAE,+BAA+B,CAAC;EAEjF,MAAML,MAAM,GAAG,MAAMJ,MAAM,CAACqB,iBAAiB,CAACrB,MAAM,CAACsB,qBAAqB,CAACC,MAAM,EAAEH,IAAI,EAAE;IACvFI,QAAQ,EAAExB,MAAM,CAACyB,cAAc,CAACC;GACjC,CAAC;EACF,OAAOd,sBAAsB,CAACR,MAAM,CAAC;AACvC;AAEA,OAAO,eAAeuB,cAAcA,CAClCX,IAAA,GAAe,GAAG;EAGlB,MAAMY,YAAY,GAAGb,cAAc,CAACC,IAAI,CAAC;EACzC,MAAMa,aAAa,GAAG,MAAMV,oBAAoB,CAACS,YAAY,CAAC;EAE9D,OAAO;IAAEA,YAAY;IAAEC;EAAa,CAAE;AACxC;AAKA,OAAO,eAAeC,sBAAsBA,CAACd,IAAY;EACvD,MAAMe,KAAK,GAAGhB,cAAc,CAACC,IAAI,CAAC;EAClC,MAAMZ,MAAM,GAAG,MAAMJ,MAAM,CAACqB,iBAAiB,CAACrB,MAAM,CAACsB,qBAAqB,CAACC,MAAM,EAAEQ,KAAK,EAAE;IACxFP,QAAQ,EAAExB,MAAM,CAACyB,cAAc,CAACO;GACjC,CAAC;EACF,OAAOpB,sBAAsB,CAACR,MAAM,CAAC;AACvC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}