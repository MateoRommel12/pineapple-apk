{"ast":null,"code":"import { isAndroid, isBoolean, isNull, isString, isValidUrl } from '@react-native-firebase/app/lib/common';\nimport { setReactNativeModule } from '@react-native-firebase/app/lib/internal/nativeModule';\nimport { FirebaseModule, createModuleNamespace, getFirebaseRoot } from '@react-native-firebase/app/lib/internal';\nimport ConfirmationResult from './ConfirmationResult';\nimport PhoneAuthListener from './PhoneAuthListener';\nimport PhoneMultiFactorGenerator from './PhoneMultiFactorGenerator';\nimport Settings from './Settings';\nimport User from './User';\nimport { getMultiFactorResolver } from './getMultiFactorResolver';\nimport { MultiFactorUser, multiFactor } from './multiFactor';\nimport AppleAuthProvider from './providers/AppleAuthProvider';\nimport EmailAuthProvider from './providers/EmailAuthProvider';\nimport FacebookAuthProvider from './providers/FacebookAuthProvider';\nimport GithubAuthProvider from './providers/GithubAuthProvider';\nimport GoogleAuthProvider from './providers/GoogleAuthProvider';\nimport OAuthProvider from './providers/OAuthProvider';\nimport OIDCAuthProvider from './providers/OIDCAuthProvider';\nimport PhoneAuthProvider from './providers/PhoneAuthProvider';\nimport TwitterAuthProvider from './providers/TwitterAuthProvider';\nimport version from './version';\nimport fallBackModule from './web/RNFBAuthModule';\nimport { warnDynamicLink } from './utils';\nexport { AppleAuthProvider, EmailAuthProvider, PhoneAuthProvider, GoogleAuthProvider, GithubAuthProvider, TwitterAuthProvider, FacebookAuthProvider, PhoneMultiFactorGenerator, OAuthProvider, OIDCAuthProvider };\nconst statics = {\n  AppleAuthProvider,\n  EmailAuthProvider,\n  PhoneAuthProvider,\n  GoogleAuthProvider,\n  GithubAuthProvider,\n  TwitterAuthProvider,\n  FacebookAuthProvider,\n  PhoneMultiFactorGenerator,\n  OAuthProvider,\n  OIDCAuthProvider,\n  PhoneAuthState: {\n    CODE_SENT: 'sent',\n    AUTO_VERIFY_TIMEOUT: 'timeout',\n    AUTO_VERIFIED: 'verified',\n    ERROR: 'error'\n  },\n  getMultiFactorResolver,\n  multiFactor\n};\nconst namespace = 'auth';\nconst nativeModuleName = 'RNFBAuthModule';\nclass FirebaseAuthModule extends FirebaseModule {\n  constructor(...args) {\n    super(...args);\n    this._user = null;\n    this._settings = null;\n    this._authResult = false;\n    this._languageCode = this.native.APP_LANGUAGE[this.app._name];\n    this._tenantId = null;\n    if (!this.languageCode) {\n      this._languageCode = this.native.APP_LANGUAGE['[DEFAULT]'];\n    }\n    if (this.native.APP_USER[this.app._name]) {\n      this._setUser(this.native.APP_USER[this.app._name]);\n    }\n    this.emitter.addListener(this.eventNameForApp('auth_state_changed'), event => {\n      this._setUser(event.user);\n      this.emitter.emit(this.eventNameForApp('onAuthStateChanged'), this._user);\n    });\n    this.emitter.addListener(this.eventNameForApp('phone_auth_state_changed'), event => {\n      const eventKey = `phone:auth:${event.requestKey}:${event.type}`;\n      this.emitter.emit(eventKey, event.state);\n    });\n    this.emitter.addListener(this.eventNameForApp('auth_id_token_changed'), auth => {\n      this._setUser(auth.user);\n      this.emitter.emit(this.eventNameForApp('onIdTokenChanged'), this._user);\n    });\n    this.native.addAuthStateListener();\n    this.native.addIdTokenListener();\n    this.native.configureAuthDomain();\n  }\n  get languageCode() {\n    return this._languageCode;\n  }\n  set languageCode(code) {\n    if (!isString(code) && !isNull(code)) {\n      throw new Error(\"firebase.auth().languageCode = (*) expected 'languageCode' to be a string or null value\");\n    }\n    if (code === null) {\n      this._languageCode = this.native.APP_LANGUAGE[this.app._name];\n      if (!this.languageCode) {\n        this._languageCode = this.native.APP_LANGUAGE['[DEFAULT]'];\n      }\n    } else {\n      this._languageCode = code;\n    }\n    this.setLanguageCode(code);\n  }\n  get config() {\n    return {};\n  }\n  get tenantId() {\n    return this._tenantId;\n  }\n  get settings() {\n    if (!this._settings) {\n      this._settings = new Settings(this);\n    }\n    return this._settings;\n  }\n  get currentUser() {\n    return this._user;\n  }\n  _setUser(user) {\n    this._user = user ? new User(this, user) : null;\n    this._authResult = true;\n    this.emitter.emit(this.eventNameForApp('onUserChanged'), this._user);\n    return this._user;\n  }\n  _setUserCredential(userCredential) {\n    const user = new User(this, userCredential.user);\n    this._user = user;\n    this._authResult = true;\n    this.emitter.emit(this.eventNameForApp('onUserChanged'), this._user);\n    return {\n      additionalUserInfo: userCredential.additionalUserInfo,\n      user\n    };\n  }\n  async setLanguageCode(code) {\n    if (!isString(code) && !isNull(code)) {\n      throw new Error(\"firebase.auth().setLanguageCode(*) expected 'languageCode' to be a string or null value\");\n    }\n    await this.native.setLanguageCode(code);\n    if (code === null) {\n      this._languageCode = this.native.APP_LANGUAGE[this.app._name];\n      if (!this.languageCode) {\n        this._languageCode = this.native.APP_LANGUAGE['[DEFAULT]'];\n      }\n    } else {\n      this._languageCode = code;\n    }\n  }\n  async setTenantId(tenantId) {\n    if (!isString(tenantId)) {\n      throw new Error(\"firebase.auth().setTenantId(*) expected 'tenantId' to be a string\");\n    }\n    this._tenantId = tenantId;\n    await this.native.setTenantId(tenantId);\n  }\n  _parseListener(listenerOrObserver) {\n    return typeof listenerOrObserver === 'object' ? listenerOrObserver.next.bind(listenerOrObserver) : listenerOrObserver;\n  }\n  onAuthStateChanged(listenerOrObserver) {\n    const listener = this._parseListener(listenerOrObserver);\n    const subscription = this.emitter.addListener(this.eventNameForApp('onAuthStateChanged'), listener);\n    if (this._authResult) {\n      Promise.resolve().then(() => {\n        listener(this._user || null);\n      });\n    }\n    return () => subscription.remove();\n  }\n  onIdTokenChanged(listenerOrObserver) {\n    const listener = this._parseListener(listenerOrObserver);\n    const subscription = this.emitter.addListener(this.eventNameForApp('onIdTokenChanged'), listener);\n    if (this._authResult) {\n      Promise.resolve().then(() => {\n        listener(this._user || null);\n      });\n    }\n    return () => subscription.remove();\n  }\n  onUserChanged(listenerOrObserver) {\n    const listener = this._parseListener(listenerOrObserver);\n    const subscription = this.emitter.addListener(this.eventNameForApp('onUserChanged'), listener);\n    if (this._authResult) {\n      Promise.resolve().then(() => {\n        listener(this._user || null);\n      });\n    }\n    return () => {\n      subscription.remove();\n    };\n  }\n  signOut() {\n    return this.native.signOut().then(() => {\n      this._setUser();\n    });\n  }\n  signInAnonymously() {\n    return this.native.signInAnonymously().then(userCredential => this._setUserCredential(userCredential));\n  }\n  signInWithPhoneNumber(phoneNumber, forceResend) {\n    if (isAndroid) {\n      return this.native.signInWithPhoneNumber(phoneNumber, forceResend || false).then(result => new ConfirmationResult(this, result.verificationId));\n    }\n    return this.native.signInWithPhoneNumber(phoneNumber).then(result => new ConfirmationResult(this, result.verificationId));\n  }\n  verifyPhoneNumber(phoneNumber, autoVerifyTimeoutOrForceResend, forceResend) {\n    let _forceResend = forceResend;\n    let _autoVerifyTimeout = 60;\n    if (isBoolean(autoVerifyTimeoutOrForceResend)) {\n      _forceResend = autoVerifyTimeoutOrForceResend;\n    } else {\n      _autoVerifyTimeout = autoVerifyTimeoutOrForceResend;\n    }\n    return new PhoneAuthListener(this, phoneNumber, _autoVerifyTimeout, _forceResend);\n  }\n  verifyPhoneNumberWithMultiFactorInfo(multiFactorHint, session) {\n    return this.native.verifyPhoneNumberWithMultiFactorInfo(multiFactorHint.uid, session);\n  }\n  verifyPhoneNumberForMultiFactor(phoneInfoOptions) {\n    const {\n      phoneNumber,\n      session\n    } = phoneInfoOptions;\n    return this.native.verifyPhoneNumberForMultiFactor(phoneNumber, session);\n  }\n  resolveMultiFactorSignIn(session, verificationId, verificationCode) {\n    return this.native.resolveMultiFactorSignIn(session, verificationId, verificationCode).then(userCredential => {\n      return this._setUserCredential(userCredential);\n    });\n  }\n  createUserWithEmailAndPassword(email, password) {\n    return this.native.createUserWithEmailAndPassword(email, password).then(userCredential => this._setUserCredential(userCredential));\n  }\n  signInWithEmailAndPassword(email, password) {\n    return this.native.signInWithEmailAndPassword(email, password).then(userCredential => this._setUserCredential(userCredential));\n  }\n  signInWithCustomToken(customToken) {\n    return this.native.signInWithCustomToken(customToken).then(userCredential => this._setUserCredential(userCredential));\n  }\n  signInWithCredential(credential) {\n    return this.native.signInWithCredential(credential.providerId, credential.token, credential.secret).then(userCredential => this._setUserCredential(userCredential));\n  }\n  revokeToken(authorizationCode) {\n    return this.native.revokeToken(authorizationCode);\n  }\n  sendPasswordResetEmail(email, actionCodeSettings = null) {\n    warnDynamicLink(actionCodeSettings);\n    return this.native.sendPasswordResetEmail(email, actionCodeSettings);\n  }\n  sendSignInLinkToEmail(email, actionCodeSettings = {}) {\n    warnDynamicLink(actionCodeSettings);\n    return this.native.sendSignInLinkToEmail(email, actionCodeSettings);\n  }\n  isSignInWithEmailLink(emailLink) {\n    return typeof emailLink === 'string' && (emailLink.includes('mode=signIn') || emailLink.includes('mode%3DsignIn')) && (emailLink.includes('oobCode=') || emailLink.includes('oobCode%3D'));\n  }\n  signInWithEmailLink(email, emailLink) {\n    return this.native.signInWithEmailLink(email, emailLink).then(userCredential => this._setUserCredential(userCredential));\n  }\n  confirmPasswordReset(code, newPassword) {\n    return this.native.confirmPasswordReset(code, newPassword);\n  }\n  applyActionCode(code) {\n    return this.native.applyActionCode(code).then(user => {\n      this._setUser(user);\n    });\n  }\n  checkActionCode(code) {\n    return this.native.checkActionCode(code);\n  }\n  fetchSignInMethodsForEmail(email) {\n    return this.native.fetchSignInMethodsForEmail(email);\n  }\n  verifyPasswordResetCode(code) {\n    return this.native.verifyPasswordResetCode(code);\n  }\n  useUserAccessGroup(userAccessGroup) {\n    if (isAndroid) {\n      return Promise.resolve();\n    }\n    return this.native.useUserAccessGroup(userAccessGroup);\n  }\n  getRedirectResult() {\n    throw new Error('firebase.auth().getRedirectResult() is unsupported by the native Firebase SDKs.');\n  }\n  setPersistence() {\n    throw new Error('firebase.auth().setPersistence() is unsupported by the native Firebase SDKs.');\n  }\n  signInWithPopup(provider) {\n    return this.native.signInWithProvider(provider.toObject()).then(userCredential => this._setUserCredential(userCredential));\n  }\n  signInWithRedirect(provider) {\n    return this.native.signInWithProvider(provider.toObject()).then(userCredential => this._setUserCredential(userCredential));\n  }\n  useDeviceLanguage() {\n    throw new Error('firebase.auth().useDeviceLanguage() is unsupported by the native Firebase SDKs.');\n  }\n  useEmulator(url) {\n    if (!url || !isString(url) || !isValidUrl(url)) {\n      throw new Error('firebase.auth().useEmulator() takes a non-empty string URL');\n    }\n    let _url = url;\n    const androidBypassEmulatorUrlRemap = typeof this.firebaseJson.android_bypass_emulator_url_remap === 'boolean' && this.firebaseJson.android_bypass_emulator_url_remap;\n    if (!androidBypassEmulatorUrlRemap && isAndroid && _url) {\n      if (_url.startsWith('http://localhost')) {\n        _url = _url.replace('http://localhost', 'http://10.0.2.2');\n        console.log('Mapping auth host \"localhost\" to \"10.0.2.2\" for android emulators. Use real IP on real devices. You can bypass this behaviour with \"android_bypass_emulator_url_remap\" flag.');\n      }\n      if (_url.startsWith('http://127.0.0.1')) {\n        _url = _url.replace('http://127.0.0.1', 'http://10.0.2.2');\n        console.log('Mapping auth host \"127.0.0.1\" to \"10.0.2.2\" for android emulators. Use real IP on real devices. You can bypass this behaviour with \"android_bypass_emulator_url_remap\" flag.');\n      }\n    }\n    const hostPortRegex = /^http:\\/\\/([\\w\\d-.]+):(\\d+)$/;\n    const urlMatches = _url.match(hostPortRegex);\n    if (!urlMatches) {\n      throw new Error('firebase.auth().useEmulator() unable to parse host and port from URL');\n    }\n    const host = urlMatches[1];\n    const port = parseInt(urlMatches[2], 10);\n    this.native.useEmulator(host, port);\n    return [host, port];\n  }\n  getMultiFactorResolver(error) {\n    return getMultiFactorResolver(this, error);\n  }\n  multiFactor(user) {\n    if (user.userId !== this.currentUser.userId) {\n      throw new Error('firebase.auth().multiFactor() only operates on currentUser');\n    }\n    return new MultiFactorUser(this, user);\n  }\n  getCustomAuthDomain() {\n    return this.native.getCustomAuthDomain();\n  }\n}\nexport const SDK_VERSION = version;\nexport default createModuleNamespace({\n  statics,\n  version,\n  namespace,\n  nativeModuleName,\n  nativeEvents: ['auth_state_changed', 'auth_id_token_changed', 'phone_auth_state_changed'],\n  hasMultiAppSupport: true,\n  hasCustomUrlOrRegionSupport: false,\n  ModuleClass: FirebaseAuthModule\n});\nexport * from './modular/index';\nexport const firebase = getFirebaseRoot();\nsetReactNativeModule(nativeModuleName, fallBackModule);","map":{"version":3,"names":["isAndroid","isBoolean","isNull","isString","isValidUrl","setReactNativeModule","FirebaseModule","createModuleNamespace","getFirebaseRoot","ConfirmationResult","PhoneAuthListener","PhoneMultiFactorGenerator","Settings","User","getMultiFactorResolver","MultiFactorUser","multiFactor","AppleAuthProvider","EmailAuthProvider","FacebookAuthProvider","GithubAuthProvider","GoogleAuthProvider","OAuthProvider","OIDCAuthProvider","PhoneAuthProvider","TwitterAuthProvider","version","fallBackModule","warnDynamicLink","statics","PhoneAuthState","CODE_SENT","AUTO_VERIFY_TIMEOUT","AUTO_VERIFIED","ERROR","namespace","nativeModuleName","FirebaseAuthModule","constructor","args","_user","_settings","_authResult","_languageCode","native","APP_LANGUAGE","app","_name","_tenantId","languageCode","APP_USER","_setUser","emitter","addListener","eventNameForApp","event","user","emit","eventKey","requestKey","type","state","auth","addAuthStateListener","addIdTokenListener","configureAuthDomain","code","Error","setLanguageCode","config","tenantId","settings","currentUser","_setUserCredential","userCredential","additionalUserInfo","setTenantId","_parseListener","listenerOrObserver","next","bind","onAuthStateChanged","listener","subscription","Promise","resolve","then","remove","onIdTokenChanged","onUserChanged","signOut","signInAnonymously","signInWithPhoneNumber","phoneNumber","forceResend","result","verificationId","verifyPhoneNumber","autoVerifyTimeoutOrForceResend","_forceResend","_autoVerifyTimeout","verifyPhoneNumberWithMultiFactorInfo","multiFactorHint","session","uid","verifyPhoneNumberForMultiFactor","phoneInfoOptions","resolveMultiFactorSignIn","verificationCode","createUserWithEmailAndPassword","email","password","signInWithEmailAndPassword","signInWithCustomToken","customToken","signInWithCredential","credential","providerId","token","secret","revokeToken","authorizationCode","sendPasswordResetEmail","actionCodeSettings","sendSignInLinkToEmail","isSignInWithEmailLink","emailLink","includes","signInWithEmailLink","confirmPasswordReset","newPassword","applyActionCode","checkActionCode","fetchSignInMethodsForEmail","verifyPasswordResetCode","useUserAccessGroup","userAccessGroup","getRedirectResult","setPersistence","signInWithPopup","provider","signInWithProvider","toObject","signInWithRedirect","useDeviceLanguage","useEmulator","url","_url","androidBypassEmulatorUrlRemap","firebaseJson","android_bypass_emulator_url_remap","startsWith","replace","console","log","hostPortRegex","urlMatches","match","host","port","parseInt","error","userId","getCustomAuthDomain","SDK_VERSION","nativeEvents","hasMultiAppSupport","hasCustomUrlOrRegionSupport","ModuleClass","firebase"],"sources":["C:/Users/ACER/Documents/Capstone/node_modules/@react-native-firebase/auth/lib/index.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  isAndroid,\n  isBoolean,\n  isNull,\n  isString,\n  isValidUrl,\n} from '@react-native-firebase/app/lib/common';\nimport { setReactNativeModule } from '@react-native-firebase/app/lib/internal/nativeModule';\nimport {\n  FirebaseModule,\n  createModuleNamespace,\n  getFirebaseRoot,\n} from '@react-native-firebase/app/lib/internal';\nimport ConfirmationResult from './ConfirmationResult';\nimport PhoneAuthListener from './PhoneAuthListener';\nimport PhoneMultiFactorGenerator from './PhoneMultiFactorGenerator';\nimport Settings from './Settings';\nimport User from './User';\nimport { getMultiFactorResolver } from './getMultiFactorResolver';\nimport { MultiFactorUser, multiFactor } from './multiFactor';\nimport AppleAuthProvider from './providers/AppleAuthProvider';\nimport EmailAuthProvider from './providers/EmailAuthProvider';\nimport FacebookAuthProvider from './providers/FacebookAuthProvider';\nimport GithubAuthProvider from './providers/GithubAuthProvider';\nimport GoogleAuthProvider from './providers/GoogleAuthProvider';\nimport OAuthProvider from './providers/OAuthProvider';\nimport OIDCAuthProvider from './providers/OIDCAuthProvider';\nimport PhoneAuthProvider from './providers/PhoneAuthProvider';\nimport TwitterAuthProvider from './providers/TwitterAuthProvider';\nimport version from './version';\nimport fallBackModule from './web/RNFBAuthModule';\nimport { warnDynamicLink } from './utils';\n\nexport {\n  AppleAuthProvider,\n  EmailAuthProvider,\n  PhoneAuthProvider,\n  GoogleAuthProvider,\n  GithubAuthProvider,\n  TwitterAuthProvider,\n  FacebookAuthProvider,\n  PhoneMultiFactorGenerator,\n  OAuthProvider,\n  OIDCAuthProvider,\n};\n\nconst statics = {\n  AppleAuthProvider,\n  EmailAuthProvider,\n  PhoneAuthProvider,\n  GoogleAuthProvider,\n  GithubAuthProvider,\n  TwitterAuthProvider,\n  FacebookAuthProvider,\n  PhoneMultiFactorGenerator,\n  OAuthProvider,\n  OIDCAuthProvider,\n  PhoneAuthState: {\n    CODE_SENT: 'sent',\n    AUTO_VERIFY_TIMEOUT: 'timeout',\n    AUTO_VERIFIED: 'verified',\n    ERROR: 'error',\n  },\n  getMultiFactorResolver,\n  multiFactor,\n};\n\nconst namespace = 'auth';\nconst nativeModuleName = 'RNFBAuthModule';\n\nclass FirebaseAuthModule extends FirebaseModule {\n  constructor(...args) {\n    super(...args);\n    this._user = null;\n    this._settings = null;\n    this._authResult = false;\n    this._languageCode = this.native.APP_LANGUAGE[this.app._name];\n    this._tenantId = null;\n\n    if (!this.languageCode) {\n      this._languageCode = this.native.APP_LANGUAGE['[DEFAULT]'];\n    }\n\n    if (this.native.APP_USER[this.app._name]) {\n      this._setUser(this.native.APP_USER[this.app._name]);\n    }\n\n    this.emitter.addListener(this.eventNameForApp('auth_state_changed'), event => {\n      this._setUser(event.user);\n      this.emitter.emit(this.eventNameForApp('onAuthStateChanged'), this._user);\n    });\n\n    this.emitter.addListener(this.eventNameForApp('phone_auth_state_changed'), event => {\n      const eventKey = `phone:auth:${event.requestKey}:${event.type}`;\n      this.emitter.emit(eventKey, event.state);\n    });\n\n    this.emitter.addListener(this.eventNameForApp('auth_id_token_changed'), auth => {\n      this._setUser(auth.user);\n      this.emitter.emit(this.eventNameForApp('onIdTokenChanged'), this._user);\n    });\n\n    this.native.addAuthStateListener();\n    this.native.addIdTokenListener();\n\n    // custom authDomain in only available from App's FirebaseOptions,\n    // but we need it in Auth if it exists. During app configuration we store\n    // mappings from app name to authDomain, this auth constructor\n    // is a reasonable time to use the mapping and set it into auth natively\n    this.native.configureAuthDomain();\n  }\n\n  get languageCode() {\n    return this._languageCode;\n  }\n\n  set languageCode(code) {\n    // For modular API, not recommended to set languageCode directly as it should be set in the native SDKs first\n    if (!isString(code) && !isNull(code)) {\n      throw new Error(\n        \"firebase.auth().languageCode = (*) expected 'languageCode' to be a string or null value\",\n      );\n    }\n    // as this is a setter, we can't use async/await. So we set it first so it is available immediately\n    if (code === null) {\n      this._languageCode = this.native.APP_LANGUAGE[this.app._name];\n\n      if (!this.languageCode) {\n        this._languageCode = this.native.APP_LANGUAGE['[DEFAULT]'];\n      }\n    } else {\n      this._languageCode = code;\n    }\n    // This sets it natively\n    this.setLanguageCode(code);\n  }\n\n  get config() {\n    // for modular API, firebase JS SDK has a config object which is not available in native SDKs\n    return {};\n  }\n\n  get tenantId() {\n    return this._tenantId;\n  }\n\n  get settings() {\n    if (!this._settings) {\n      this._settings = new Settings(this);\n    }\n    return this._settings;\n  }\n\n  get currentUser() {\n    return this._user;\n  }\n\n  _setUser(user) {\n    this._user = user ? new User(this, user) : null;\n    this._authResult = true;\n    this.emitter.emit(this.eventNameForApp('onUserChanged'), this._user);\n    return this._user;\n  }\n\n  _setUserCredential(userCredential) {\n    const user = new User(this, userCredential.user);\n    this._user = user;\n    this._authResult = true;\n    this.emitter.emit(this.eventNameForApp('onUserChanged'), this._user);\n    return {\n      additionalUserInfo: userCredential.additionalUserInfo,\n      user,\n    };\n  }\n\n  async setLanguageCode(code) {\n    if (!isString(code) && !isNull(code)) {\n      throw new Error(\n        \"firebase.auth().setLanguageCode(*) expected 'languageCode' to be a string or null value\",\n      );\n    }\n\n    await this.native.setLanguageCode(code);\n\n    if (code === null) {\n      this._languageCode = this.native.APP_LANGUAGE[this.app._name];\n\n      if (!this.languageCode) {\n        this._languageCode = this.native.APP_LANGUAGE['[DEFAULT]'];\n      }\n    } else {\n      this._languageCode = code;\n    }\n  }\n\n  async setTenantId(tenantId) {\n    if (!isString(tenantId)) {\n      throw new Error(\"firebase.auth().setTenantId(*) expected 'tenantId' to be a string\");\n    }\n    this._tenantId = tenantId;\n    await this.native.setTenantId(tenantId);\n  }\n\n  _parseListener(listenerOrObserver) {\n    return typeof listenerOrObserver === 'object'\n      ? listenerOrObserver.next.bind(listenerOrObserver)\n      : listenerOrObserver;\n  }\n\n  onAuthStateChanged(listenerOrObserver) {\n    const listener = this._parseListener(listenerOrObserver);\n    const subscription = this.emitter.addListener(\n      this.eventNameForApp('onAuthStateChanged'),\n      listener,\n    );\n\n    if (this._authResult) {\n      Promise.resolve().then(() => {\n        listener(this._user || null);\n      });\n    }\n    return () => subscription.remove();\n  }\n\n  onIdTokenChanged(listenerOrObserver) {\n    const listener = this._parseListener(listenerOrObserver);\n    const subscription = this.emitter.addListener(\n      this.eventNameForApp('onIdTokenChanged'),\n      listener,\n    );\n\n    if (this._authResult) {\n      Promise.resolve().then(() => {\n        listener(this._user || null);\n      });\n    }\n    return () => subscription.remove();\n  }\n\n  onUserChanged(listenerOrObserver) {\n    const listener = this._parseListener(listenerOrObserver);\n    const subscription = this.emitter.addListener(this.eventNameForApp('onUserChanged'), listener);\n    if (this._authResult) {\n      Promise.resolve().then(() => {\n        listener(this._user || null);\n      });\n    }\n\n    return () => {\n      subscription.remove();\n    };\n  }\n\n  signOut() {\n    return this.native.signOut().then(() => {\n      this._setUser();\n    });\n  }\n\n  signInAnonymously() {\n    return this.native\n      .signInAnonymously()\n      .then(userCredential => this._setUserCredential(userCredential));\n  }\n\n  signInWithPhoneNumber(phoneNumber, forceResend) {\n    if (isAndroid) {\n      return this.native\n        .signInWithPhoneNumber(phoneNumber, forceResend || false)\n        .then(result => new ConfirmationResult(this, result.verificationId));\n    }\n\n    return this.native\n      .signInWithPhoneNumber(phoneNumber)\n      .then(result => new ConfirmationResult(this, result.verificationId));\n  }\n\n  verifyPhoneNumber(phoneNumber, autoVerifyTimeoutOrForceResend, forceResend) {\n    let _forceResend = forceResend;\n    let _autoVerifyTimeout = 60;\n\n    if (isBoolean(autoVerifyTimeoutOrForceResend)) {\n      _forceResend = autoVerifyTimeoutOrForceResend;\n    } else {\n      _autoVerifyTimeout = autoVerifyTimeoutOrForceResend;\n    }\n\n    return new PhoneAuthListener(this, phoneNumber, _autoVerifyTimeout, _forceResend);\n  }\n\n  verifyPhoneNumberWithMultiFactorInfo(multiFactorHint, session) {\n    return this.native.verifyPhoneNumberWithMultiFactorInfo(multiFactorHint.uid, session);\n  }\n\n  verifyPhoneNumberForMultiFactor(phoneInfoOptions) {\n    const { phoneNumber, session } = phoneInfoOptions;\n    return this.native.verifyPhoneNumberForMultiFactor(phoneNumber, session);\n  }\n\n  resolveMultiFactorSignIn(session, verificationId, verificationCode) {\n    return this.native\n      .resolveMultiFactorSignIn(session, verificationId, verificationCode)\n      .then(userCredential => {\n        return this._setUserCredential(userCredential);\n      });\n  }\n\n  createUserWithEmailAndPassword(email, password) {\n    return this.native\n      .createUserWithEmailAndPassword(email, password)\n      .then(userCredential => this._setUserCredential(userCredential));\n  }\n\n  signInWithEmailAndPassword(email, password) {\n    return this.native\n      .signInWithEmailAndPassword(email, password)\n      .then(userCredential => this._setUserCredential(userCredential));\n  }\n\n  signInWithCustomToken(customToken) {\n    return this.native\n      .signInWithCustomToken(customToken)\n      .then(userCredential => this._setUserCredential(userCredential));\n  }\n\n  signInWithCredential(credential) {\n    return this.native\n      .signInWithCredential(credential.providerId, credential.token, credential.secret)\n      .then(userCredential => this._setUserCredential(userCredential));\n  }\n\n  revokeToken(authorizationCode) {\n    return this.native.revokeToken(authorizationCode);\n  }\n\n  sendPasswordResetEmail(email, actionCodeSettings = null) {\n    warnDynamicLink(actionCodeSettings);\n    return this.native.sendPasswordResetEmail(email, actionCodeSettings);\n  }\n\n  sendSignInLinkToEmail(email, actionCodeSettings = {}) {\n    warnDynamicLink(actionCodeSettings);\n    return this.native.sendSignInLinkToEmail(email, actionCodeSettings);\n  }\n\n  isSignInWithEmailLink(emailLink) {\n    return (\n      typeof emailLink === 'string' &&\n      (emailLink.includes('mode=signIn') || emailLink.includes('mode%3DsignIn')) &&\n      (emailLink.includes('oobCode=') || emailLink.includes('oobCode%3D'))\n    );\n  }\n\n  signInWithEmailLink(email, emailLink) {\n    return this.native\n      .signInWithEmailLink(email, emailLink)\n      .then(userCredential => this._setUserCredential(userCredential));\n  }\n\n  confirmPasswordReset(code, newPassword) {\n    return this.native.confirmPasswordReset(code, newPassword);\n  }\n\n  applyActionCode(code) {\n    return this.native.applyActionCode(code).then(user => {\n      this._setUser(user);\n    });\n  }\n\n  checkActionCode(code) {\n    return this.native.checkActionCode(code);\n  }\n\n  fetchSignInMethodsForEmail(email) {\n    return this.native.fetchSignInMethodsForEmail(email);\n  }\n\n  verifyPasswordResetCode(code) {\n    return this.native.verifyPasswordResetCode(code);\n  }\n\n  useUserAccessGroup(userAccessGroup) {\n    if (isAndroid) {\n      return Promise.resolve();\n    }\n    return this.native.useUserAccessGroup(userAccessGroup);\n  }\n\n  getRedirectResult() {\n    throw new Error(\n      'firebase.auth().getRedirectResult() is unsupported by the native Firebase SDKs.',\n    );\n  }\n\n  setPersistence() {\n    throw new Error('firebase.auth().setPersistence() is unsupported by the native Firebase SDKs.');\n  }\n\n  signInWithPopup(provider) {\n    return this.native\n      .signInWithProvider(provider.toObject())\n      .then(userCredential => this._setUserCredential(userCredential));\n  }\n\n  signInWithRedirect(provider) {\n    return this.native\n      .signInWithProvider(provider.toObject())\n      .then(userCredential => this._setUserCredential(userCredential));\n  }\n\n  // firebase issue - https://github.com/invertase/react-native-firebase/pull/655#issuecomment-349904680\n  useDeviceLanguage() {\n    throw new Error(\n      'firebase.auth().useDeviceLanguage() is unsupported by the native Firebase SDKs.',\n    );\n  }\n\n  useEmulator(url) {\n    if (!url || !isString(url) || !isValidUrl(url)) {\n      throw new Error('firebase.auth().useEmulator() takes a non-empty string URL');\n    }\n\n    let _url = url;\n    const androidBypassEmulatorUrlRemap =\n      typeof this.firebaseJson.android_bypass_emulator_url_remap === 'boolean' &&\n      this.firebaseJson.android_bypass_emulator_url_remap;\n    if (!androidBypassEmulatorUrlRemap && isAndroid && _url) {\n      if (_url.startsWith('http://localhost')) {\n        _url = _url.replace('http://localhost', 'http://10.0.2.2');\n        // eslint-disable-next-line no-console\n        console.log(\n          'Mapping auth host \"localhost\" to \"10.0.2.2\" for android emulators. Use real IP on real devices. You can bypass this behaviour with \"android_bypass_emulator_url_remap\" flag.',\n        );\n      }\n      if (_url.startsWith('http://127.0.0.1')) {\n        _url = _url.replace('http://127.0.0.1', 'http://10.0.2.2');\n        // eslint-disable-next-line no-console\n        console.log(\n          'Mapping auth host \"127.0.0.1\" to \"10.0.2.2\" for android emulators. Use real IP on real devices. You can bypass this behaviour with \"android_bypass_emulator_url_remap\" flag.',\n        );\n      }\n    }\n\n    // Native calls take the host and port split out\n    const hostPortRegex = /^http:\\/\\/([\\w\\d-.]+):(\\d+)$/;\n    const urlMatches = _url.match(hostPortRegex);\n    if (!urlMatches) {\n      throw new Error('firebase.auth().useEmulator() unable to parse host and port from URL');\n    }\n    const host = urlMatches[1];\n    const port = parseInt(urlMatches[2], 10);\n    this.native.useEmulator(host, port);\n    return [host, port]; // undocumented return, useful for unit testing\n  }\n\n  getMultiFactorResolver(error) {\n    return getMultiFactorResolver(this, error);\n  }\n\n  multiFactor(user) {\n    if (user.userId !== this.currentUser.userId) {\n      throw new Error('firebase.auth().multiFactor() only operates on currentUser');\n    }\n    return new MultiFactorUser(this, user);\n  }\n\n  getCustomAuthDomain() {\n    return this.native.getCustomAuthDomain();\n  }\n}\n\n// import { SDK_VERSION } from '@react-native-firebase/auth';\nexport const SDK_VERSION = version;\n\n// import auth from '@react-native-firebase/auth';\n// auth().X(...);\nexport default createModuleNamespace({\n  statics,\n  version,\n  namespace,\n  nativeModuleName,\n  nativeEvents: ['auth_state_changed', 'auth_id_token_changed', 'phone_auth_state_changed'],\n  hasMultiAppSupport: true,\n  hasCustomUrlOrRegionSupport: false,\n  ModuleClass: FirebaseAuthModule,\n});\n\nexport * from './modular/index';\n\n// import auth, { firebase } from '@react-native-firebase/auth';\n// auth().X(...);\n// firebase.auth().X(...);\nexport const firebase = getFirebaseRoot();\n\n// Register the interop module for non-native platforms.\nsetReactNativeModule(nativeModuleName, fallBackModule);\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}