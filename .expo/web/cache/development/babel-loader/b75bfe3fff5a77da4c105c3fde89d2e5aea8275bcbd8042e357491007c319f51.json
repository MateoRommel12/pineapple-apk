{"ast":null,"code":"import NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport { getReactNativeModule } from './nativeModule';\nclass RNFBNativeEventEmitter extends NativeEventEmitter {\n  constructor() {\n    const RNFBAppModule = getReactNativeModule('RNFBAppModule');\n    if (!RNFBAppModule) {\n      throw new Error('Native module RNFBAppModule not found. Re-check module install, linking, configuration, build and install steps.');\n    }\n    super(RNFBAppModule);\n    this.ready = false;\n  }\n  addListener(eventType, listener, context) {\n    const RNFBAppModule = getReactNativeModule('RNFBAppModule');\n    if (!this.ready) {\n      RNFBAppModule.eventsNotifyReady(true);\n      this.ready = true;\n    }\n    RNFBAppModule.eventsAddListener(eventType);\n    if (globalThis.RNFBDebug) {\n      console.debug(`[RNFB-->Event][👂] ${eventType} -> listening`);\n    }\n    const listenerDebugger = (...args) => {\n      if (globalThis.RNFBDebug) {\n        console.debug(`[RNFB<--Event][📣] ${eventType} <-`, JSON.stringify(args[0]));\n        if (globalThis.RNFBTest && !globalThis.RNFBDebugInTestLeakDetection) {\n          console.debug(`[TEST--->Leak][💡] Possible leaking test detected! An event (☝️) ` + `was received outside of any running tests which may indicates that some ` + `listeners/event subscriptions that have not been unsubscribed from in your ` + `test code. The last test that ran was: \"${globalThis.RNFBDebugLastTest}\".`);\n        }\n      }\n      return listener(...args);\n    };\n    let subscription = super.addListener(`rnfb_${eventType}`, listenerDebugger, context);\n    subscription.eventType = `rnfb_${eventType}`;\n    let originalRemove = subscription.remove;\n    let newRemove = () => {\n      RNFBAppModule.eventsRemoveListener(eventType, false);\n      if (super.removeSubscription != null) {\n        super.removeSubscription(subscription);\n      } else if (originalRemove != null) {\n        originalRemove();\n      }\n    };\n    subscription.remove = newRemove;\n    return subscription;\n  }\n  removeAllListeners(eventType) {\n    const RNFBAppModule = getReactNativeModule('RNFBAppModule');\n    RNFBAppModule.eventsRemoveListener(eventType, true);\n    super.removeAllListeners(`rnfb_${eventType}`);\n  }\n  removeSubscription(subscription) {\n    const RNFBAppModule = getReactNativeModule('RNFBAppModule');\n    RNFBAppModule.eventsRemoveListener(subscription.eventType.replace('rnfb_'), false);\n    if (super.removeSubscription) {\n      super.removeSubscription(subscription);\n    }\n  }\n}\nexport default new RNFBNativeEventEmitter();","map":{"version":3,"names":["getReactNativeModule","RNFBNativeEventEmitter","NativeEventEmitter","constructor","RNFBAppModule","Error","ready","addListener","eventType","listener","context","eventsNotifyReady","eventsAddListener","globalThis","RNFBDebug","console","debug","listenerDebugger","args","JSON","stringify","RNFBTest","RNFBDebugInTestLeakDetection","RNFBDebugLastTest","subscription","originalRemove","remove","newRemove","eventsRemoveListener","removeSubscription","removeAllListeners","replace"],"sources":["C:/Users/ACER/Documents/Capstone/node_modules/@react-native-firebase/app/lib/internal/RNFBNativeEventEmitter.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { NativeEventEmitter } from 'react-native';\nimport { getReactNativeModule } from './nativeModule';\n\nclass RNFBNativeEventEmitter extends NativeEventEmitter {\n  constructor() {\n    const RNFBAppModule = getReactNativeModule('RNFBAppModule');\n    if (!RNFBAppModule) {\n      throw new Error(\n        'Native module RNFBAppModule not found. Re-check module install, linking, configuration, build and install steps.',\n      );\n    }\n    super(RNFBAppModule);\n    this.ready = false;\n  }\n\n  addListener(eventType, listener, context) {\n    const RNFBAppModule = getReactNativeModule('RNFBAppModule');\n    if (!this.ready) {\n      RNFBAppModule.eventsNotifyReady(true);\n      this.ready = true;\n    }\n    RNFBAppModule.eventsAddListener(eventType);\n    if (globalThis.RNFBDebug) {\n      // eslint-disable-next-line no-console\n      console.debug(`[RNFB-->Event][👂] ${eventType} -> listening`);\n    }\n    const listenerDebugger = (...args) => {\n      if (globalThis.RNFBDebug) {\n        // eslint-disable-next-line no-console\n        console.debug(`[RNFB<--Event][📣] ${eventType} <-`, JSON.stringify(args[0]));\n        // Possible leaking test if events are still being received after the test.\n        // This is not super accurate but it's better than nothing, e.g. if doing setup/teardown\n        // logic outside of a test this may cause false positives.\n        if (globalThis.RNFBTest && !globalThis.RNFBDebugInTestLeakDetection) {\n          // eslint-disable-next-line no-console\n          console.debug(\n            `[TEST--->Leak][💡] Possible leaking test detected! An event (☝️) ` +\n              `was received outside of any running tests which may indicates that some ` +\n              `listeners/event subscriptions that have not been unsubscribed from in your ` +\n              `test code. The last test that ran was: \"${globalThis.RNFBDebugLastTest}\".`,\n          );\n        }\n      }\n      return listener(...args);\n    };\n\n    let subscription = super.addListener(`rnfb_${eventType}`, listenerDebugger, context);\n\n    // React Native 0.65+ altered EventEmitter:\n    // - removeSubscription is gone\n    // - addListener returns an unsubscriber instead of a more complex object with eventType etc\n\n    // make sure eventType for backwards compatibility just in case\n    subscription.eventType = `rnfb_${eventType}`;\n\n    // New style is to return a remove function on the object, just in case people call that,\n    // we will modify it to do our native unsubscription then call the original\n    let originalRemove = subscription.remove;\n    let newRemove = () => {\n      RNFBAppModule.eventsRemoveListener(eventType, false);\n      if (super.removeSubscription != null) {\n        // This is for RN <= 0.64 - 65 and greater no longer have removeSubscription\n        super.removeSubscription(subscription);\n      } else if (originalRemove != null) {\n        // This is for RN >= 0.65\n        originalRemove();\n      }\n    };\n    subscription.remove = newRemove;\n    return subscription;\n  }\n\n  removeAllListeners(eventType) {\n    const RNFBAppModule = getReactNativeModule('RNFBAppModule');\n    RNFBAppModule.eventsRemoveListener(eventType, true);\n    super.removeAllListeners(`rnfb_${eventType}`);\n  }\n\n  // This is likely no longer ever called, but it is here for backwards compatibility with RN <= 0.64\n  removeSubscription(subscription) {\n    const RNFBAppModule = getReactNativeModule('RNFBAppModule');\n    RNFBAppModule.eventsRemoveListener(subscription.eventType.replace('rnfb_'), false);\n    if (super.removeSubscription) {\n      super.removeSubscription(subscription);\n    }\n  }\n}\n\nexport default new RNFBNativeEventEmitter();\n"],"mappings":";AAkBA,SAASA,oBAAoB,QAAQ,gBAAgB;AAErD,MAAMC,sBAAsB,SAASC,kBAAkB,CAAC;EACtDC,WAAWA,CAAA,EAAG;IACZ,MAAMC,aAAa,GAAGJ,oBAAoB,CAAC,eAAe,CAAC;IAC3D,IAAI,CAACI,aAAa,EAAE;MAClB,MAAM,IAAIC,KAAK,CACb,kHACF,CAAC;IACH;IACA,KAAK,CAACD,aAAa,CAAC;IACpB,IAAI,CAACE,KAAK,GAAG,KAAK;EACpB;EAEAC,WAAWA,CAACC,SAAS,EAAEC,QAAQ,EAAEC,OAAO,EAAE;IACxC,MAAMN,aAAa,GAAGJ,oBAAoB,CAAC,eAAe,CAAC;IAC3D,IAAI,CAAC,IAAI,CAACM,KAAK,EAAE;MACfF,aAAa,CAACO,iBAAiB,CAAC,IAAI,CAAC;MACrC,IAAI,CAACL,KAAK,GAAG,IAAI;IACnB;IACAF,aAAa,CAACQ,iBAAiB,CAACJ,SAAS,CAAC;IAC1C,IAAIK,UAAU,CAACC,SAAS,EAAE;MAExBC,OAAO,CAACC,KAAK,CAAC,sBAAsBR,SAAS,eAAe,CAAC;IAC/D;IACA,MAAMS,gBAAgB,GAAGA,CAAC,GAAGC,IAAI,KAAK;MACpC,IAAIL,UAAU,CAACC,SAAS,EAAE;QAExBC,OAAO,CAACC,KAAK,CAAC,sBAAsBR,SAAS,KAAK,EAAEW,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAI5E,IAAIL,UAAU,CAACQ,QAAQ,IAAI,CAACR,UAAU,CAACS,4BAA4B,EAAE;UAEnEP,OAAO,CAACC,KAAK,CACX,mEAAmE,GACjE,0EAA0E,GAC1E,6EAA6E,GAC7E,2CAA2CH,UAAU,CAACU,iBAAiB,IAC3E,CAAC;QACH;MACF;MACA,OAAOd,QAAQ,CAAC,GAAGS,IAAI,CAAC;IAC1B,CAAC;IAED,IAAIM,YAAY,GAAG,KAAK,CAACjB,WAAW,CAAC,QAAQC,SAAS,EAAE,EAAES,gBAAgB,EAAEP,OAAO,CAAC;IAOpFc,YAAY,CAAChB,SAAS,GAAG,QAAQA,SAAS,EAAE;IAI5C,IAAIiB,cAAc,GAAGD,YAAY,CAACE,MAAM;IACxC,IAAIC,SAAS,GAAGA,CAAA,KAAM;MACpBvB,aAAa,CAACwB,oBAAoB,CAACpB,SAAS,EAAE,KAAK,CAAC;MACpD,IAAI,KAAK,CAACqB,kBAAkB,IAAI,IAAI,EAAE;QAEpC,KAAK,CAACA,kBAAkB,CAACL,YAAY,CAAC;MACxC,CAAC,MAAM,IAAIC,cAAc,IAAI,IAAI,EAAE;QAEjCA,cAAc,CAAC,CAAC;MAClB;IACF,CAAC;IACDD,YAAY,CAACE,MAAM,GAAGC,SAAS;IAC/B,OAAOH,YAAY;EACrB;EAEAM,kBAAkBA,CAACtB,SAAS,EAAE;IAC5B,MAAMJ,aAAa,GAAGJ,oBAAoB,CAAC,eAAe,CAAC;IAC3DI,aAAa,CAACwB,oBAAoB,CAACpB,SAAS,EAAE,IAAI,CAAC;IACnD,KAAK,CAACsB,kBAAkB,CAAC,QAAQtB,SAAS,EAAE,CAAC;EAC/C;EAGAqB,kBAAkBA,CAACL,YAAY,EAAE;IAC/B,MAAMpB,aAAa,GAAGJ,oBAAoB,CAAC,eAAe,CAAC;IAC3DI,aAAa,CAACwB,oBAAoB,CAACJ,YAAY,CAAChB,SAAS,CAACuB,OAAO,CAAC,OAAO,CAAC,EAAE,KAAK,CAAC;IAClF,IAAI,KAAK,CAACF,kBAAkB,EAAE;MAC5B,KAAK,CAACA,kBAAkB,CAACL,YAAY,CAAC;IACxC;EACF;AACF;AAEA,eAAe,IAAIvB,sBAAsB,CAAC,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}