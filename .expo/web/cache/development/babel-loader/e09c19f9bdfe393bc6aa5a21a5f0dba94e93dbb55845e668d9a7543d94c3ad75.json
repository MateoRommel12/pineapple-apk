{"ast":null,"code":"export function multiFactor(auth) {\n  console.warn('This method is deprecated. Please use auth().multiFactor(user) instead');\n  return new MultiFactorUser(auth);\n}\nexport class MultiFactorUser {\n  constructor(auth, user) {\n    this._auth = auth;\n    if (user === undefined) {\n      user = auth.currentUser;\n    }\n    this._user = user;\n    this.enrolledFactors = user.multiFactor.enrolledFactors;\n    this.enrolledFactor = user.multiFactor.enrolledFactors;\n  }\n  getSession() {\n    return this._auth.native.getSession();\n  }\n  async enroll(multiFactorAssertion, displayName) {\n    const {\n      token,\n      secret\n    } = multiFactorAssertion;\n    await this._auth.native.finalizeMultiFactorEnrollment(token, secret, displayName);\n    return this._auth.currentUser.reload();\n  }\n  unenroll() {\n    return Promise.reject(new Error('No implemented yet.'));\n  }\n}","map":{"version":3,"names":["multiFactor","auth","console","warn","MultiFactorUser","constructor","user","_auth","undefined","currentUser","_user","enrolledFactors","enrolledFactor","getSession","native","enroll","multiFactorAssertion","displayName","token","secret","finalizeMultiFactorEnrollment","reload","unenroll","Promise","reject","Error"],"sources":["C:/Users/ACER/Documents/Capstone/node_modules/@react-native-firebase/auth/lib/multiFactor.js"],"sourcesContent":["/**\n * Return a MultiFactorUser instance the gateway to multi-factor operations.\n */\nexport function multiFactor(auth) {\n  // eslint-disable-next-line no-console\n  console.warn('This method is deprecated. Please use auth().multiFactor(user) instead');\n  return new MultiFactorUser(auth);\n}\n\nexport class MultiFactorUser {\n  constructor(auth, user) {\n    this._auth = auth;\n    if (user === undefined) {\n      user = auth.currentUser;\n    }\n    this._user = user;\n    this.enrolledFactors = user.multiFactor.enrolledFactors;\n    // @deprecated kept for backwards compatibility, please use enrolledFactors\n    this.enrolledFactor = user.multiFactor.enrolledFactors;\n  }\n\n  getSession() {\n    return this._auth.native.getSession();\n  }\n\n  /**\n   * Finalize the enrollment process for the given multi-factor assertion.\n   * Optionally set a displayName. This method will reload the current user\n   * profile, which is necessary to see the multi-factor changes.\n   */\n  async enroll(multiFactorAssertion, displayName) {\n    const { token, secret } = multiFactorAssertion;\n    await this._auth.native.finalizeMultiFactorEnrollment(token, secret, displayName);\n\n    // We need to reload the user otherwise the changes are not visible\n    return this._auth.currentUser.reload();\n  }\n\n  unenroll() {\n    return Promise.reject(new Error('No implemented yet.'));\n  }\n}\n"],"mappings":"AAGA,OAAO,SAASA,WAAWA,CAACC,IAAI,EAAE;EAEhCC,OAAO,CAACC,IAAI,CAAC,wEAAwE,CAAC;EACtF,OAAO,IAAIC,eAAe,CAACH,IAAI,CAAC;AAClC;AAEA,OAAO,MAAMG,eAAe,CAAC;EAC3BC,WAAWA,CAACJ,IAAI,EAAEK,IAAI,EAAE;IACtB,IAAI,CAACC,KAAK,GAAGN,IAAI;IACjB,IAAIK,IAAI,KAAKE,SAAS,EAAE;MACtBF,IAAI,GAAGL,IAAI,CAACQ,WAAW;IACzB;IACA,IAAI,CAACC,KAAK,GAAGJ,IAAI;IACjB,IAAI,CAACK,eAAe,GAAGL,IAAI,CAACN,WAAW,CAACW,eAAe;IAEvD,IAAI,CAACC,cAAc,GAAGN,IAAI,CAACN,WAAW,CAACW,eAAe;EACxD;EAEAE,UAAUA,CAAA,EAAG;IACX,OAAO,IAAI,CAACN,KAAK,CAACO,MAAM,CAACD,UAAU,CAAC,CAAC;EACvC;EAOA,MAAME,MAAMA,CAACC,oBAAoB,EAAEC,WAAW,EAAE;IAC9C,MAAM;MAAEC,KAAK;MAAEC;IAAO,CAAC,GAAGH,oBAAoB;IAC9C,MAAM,IAAI,CAACT,KAAK,CAACO,MAAM,CAACM,6BAA6B,CAACF,KAAK,EAAEC,MAAM,EAAEF,WAAW,CAAC;IAGjF,OAAO,IAAI,CAACV,KAAK,CAACE,WAAW,CAACY,MAAM,CAAC,CAAC;EACxC;EAEAC,QAAQA,CAAA,EAAG;IACT,OAAOC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,qBAAqB,CAAC,CAAC;EACzD;AACF","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}