{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\ACER\\\\Documents\\\\Capstone\\\\context\\\\ThemeContext.tsx\";\nimport { createContext, useContext, useState } from \"react\";\nimport useColorScheme from \"react-native-web/dist/exports/useColorScheme\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = createContext(undefined);\nexport function ThemeProvider({\n  children\n}) {\n  const colorScheme = useColorScheme();\n  const [isDarkMode, setIsDarkMode] = useState(colorScheme === \"dark\");\n  const toggleTheme = () => {\n    setIsDarkMode(prev => !prev);\n  };\n  return _jsxDEV(ThemeContext.Provider, {\n    value: {\n      isDarkMode,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 10\n  }, this);\n}\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}","map":{"version":3,"names":["_jsxFileName","createContext","useContext","useState","useColorScheme","jsxDEV","_jsxDEV","ThemeContext","undefined","ThemeProvider","children","colorScheme","isDarkMode","setIsDarkMode","toggleTheme","prev","Provider","value","fileName","lineNumber","columnNumber","useTheme","context","Error"],"sources":["C:/Users/ACER/Documents/Capstone/context/ThemeContext.tsx"],"sourcesContent":["\"use client\"\n\nimport { createContext, useContext, useState, type ReactNode } from \"react\"\nimport { useColorScheme } from \"react-native\"\n\ntype ThemeContextType = {\n  isDarkMode: boolean\n  toggleTheme: () => void\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined)\n\nexport function ThemeProvider({ children }: { children: ReactNode }) {\n  const colorScheme = useColorScheme()\n  const [isDarkMode, setIsDarkMode] = useState(colorScheme === \"dark\")\n\n  const toggleTheme = () => {\n    setIsDarkMode((prev: boolean) => !prev)\n  }\n\n  return <ThemeContext.Provider value={{ isDarkMode, toggleTheme }}>{children}</ThemeContext.Provider>\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext)\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\")\n  }\n  return context\n}\n\n"],"mappings":"AAAA,YAAY;;AAAA,IAAAA,YAAA;AAEZ,SAASC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAwB,OAAO;AAAA,OAAAC,cAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAQ3E,MAAMC,YAAY,GAAGN,aAAa,CAA+BO,SAAS,CAAC;AAE3E,OAAO,SAASC,aAAaA,CAAC;EAAEC;AAAkC,CAAC,EAAE;EACnE,MAAMC,WAAW,GAAGP,cAAc,CAAC,CAAC;EACpC,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAACQ,WAAW,KAAK,MAAM,CAAC;EAEpE,MAAMG,WAAW,GAAGA,CAAA,KAAM;IACxBD,aAAa,CAAEE,IAAa,IAAK,CAACA,IAAI,CAAC;EACzC,CAAC;EAED,OAAOT,OAAA,CAACC,YAAY,CAACS,QAAQ;IAACC,KAAK,EAAE;MAAEL,UAAU;MAAEE;IAAY,CAAE;IAAAJ,QAAA,EAAEA;EAAQ;IAAAQ,QAAA,EAAAlB,YAAA;IAAAmB,UAAA;IAAAC,YAAA;EAAA,OAAwB,CAAC;AACtG;AAEA,OAAO,SAASC,QAAQA,CAAA,EAAG;EACzB,MAAMC,OAAO,GAAGpB,UAAU,CAACK,YAAY,CAAC;EACxC,IAAIe,OAAO,KAAKd,SAAS,EAAE;IACzB,MAAM,IAAIe,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}