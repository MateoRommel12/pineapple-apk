{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"url\"];\nimport * as WebBrowser from 'expo-web-browser';\nimport invariant from 'invariant';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { CodeChallengeMethod, ResponseType } from './AuthRequest.types';\nimport { AuthError } from './Errors';\nimport * as PKCE from './PKCE';\nimport * as QueryParams from './QueryParams';\nimport { TokenResponse } from './TokenRequest';\nlet _authLock = false;\nexport class AuthRequest {\n  url = null;\n  constructor(request) {\n    this.responseType = request.responseType ?? ResponseType.Code;\n    this.clientId = request.clientId;\n    this.redirectUri = request.redirectUri;\n    this.scopes = request.scopes;\n    this.clientSecret = request.clientSecret;\n    this.prompt = request.prompt;\n    this.state = request.state ?? PKCE.generateRandom(10);\n    this.extraParams = request.extraParams ?? {};\n    this.codeChallengeMethod = request.codeChallengeMethod ?? CodeChallengeMethod.S256;\n    this.usePKCE = request.usePKCE ?? true;\n    if (__DEV__) {\n      if (this.prompt && this.extraParams.prompt) {\n        console.warn(`\\`AuthRequest\\` \\`extraParams.prompt\\` will be overwritten by \\`prompt\\`.`);\n      }\n      if (this.clientSecret && this.extraParams.client_secret) {\n        console.warn(`\\`AuthRequest\\` \\`extraParams.client_secret\\` will be overwritten by \\`clientSecret\\`.`);\n      }\n      if (this.codeChallengeMethod && this.extraParams.code_challenge_method) {\n        console.warn(`\\`AuthRequest\\` \\`extraParams.code_challenge_method\\` will be overwritten by \\`codeChallengeMethod\\`.`);\n      }\n    }\n    invariant(this.codeChallengeMethod !== CodeChallengeMethod.Plain, `\\`AuthRequest\\` does not support \\`CodeChallengeMethod.Plain\\` as it's not secure.`);\n    invariant(this.redirectUri, `\\`AuthRequest\\` requires a valid \\`redirectUri\\`. Ex: ${Platform.select({\n      web: 'https://yourwebsite.com/',\n      default: 'com.your.app:/oauthredirect'\n    })}`);\n  }\n  async getAuthRequestConfigAsync() {\n    if (this.usePKCE) {\n      await this.ensureCodeIsSetupAsync();\n    }\n    return {\n      responseType: this.responseType,\n      clientId: this.clientId,\n      redirectUri: this.redirectUri,\n      scopes: this.scopes,\n      clientSecret: this.clientSecret,\n      codeChallenge: this.codeChallenge,\n      codeChallengeMethod: this.codeChallengeMethod,\n      prompt: this.prompt,\n      state: this.state,\n      extraParams: this.extraParams,\n      usePKCE: this.usePKCE\n    };\n  }\n  async promptAsync(discovery, _ref = {}) {\n    let {\n        url\n      } = _ref,\n      options = _objectWithoutPropertiesLoose(_ref, _excluded);\n    if (!url) {\n      if (!this.url) {\n        return this.promptAsync(discovery, Object.assign({}, options, {\n          url: await this.makeAuthUrlAsync(discovery)\n        }));\n      }\n      url = this.url;\n    }\n    invariant(url, 'No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.');\n    const startUrl = url;\n    const returnUrl = this.redirectUri;\n    if (_authLock) {\n      if (__DEV__) {\n        console.warn('Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.');\n      }\n      return {\n        type: 'locked'\n      };\n    }\n    _authLock = true;\n    let result;\n    try {\n      result = await WebBrowser.openAuthSessionAsync(startUrl, returnUrl, options);\n    } finally {\n      _authLock = false;\n    }\n    if (result.type === 'opened') {\n      throw new Error('An unexpected error occurred');\n    }\n    if (result.type !== 'success') {\n      return {\n        type: result.type\n      };\n    }\n    return this.parseReturnUrl(result.url);\n  }\n  parseReturnUrl(url) {\n    const {\n      params,\n      errorCode\n    } = QueryParams.getQueryParams(url);\n    const {\n      state,\n      error = errorCode\n    } = params;\n    let parsedError = null;\n    let authentication = null;\n    if (state !== this.state) {\n      parsedError = new AuthError({\n        error: 'state_mismatch',\n        error_description: 'Cross-Site request verification failed. Cached state and returned state do not match.'\n      });\n    } else if (error) {\n      parsedError = new AuthError(Object.assign({\n        error\n      }, params));\n    }\n    if (params.access_token) {\n      authentication = TokenResponse.fromQueryParams(params);\n    }\n    return {\n      type: parsedError ? 'error' : 'success',\n      error: parsedError,\n      url,\n      params,\n      authentication,\n      errorCode\n    };\n  }\n  async makeAuthUrlAsync(discovery) {\n    const request = await this.getAuthRequestConfigAsync();\n    if (!request.state) throw new Error('Cannot make request URL without a valid `state` loaded');\n    const params = {};\n    if (request.codeChallenge) {\n      params.code_challenge = request.codeChallenge;\n    }\n    for (const extra in request.extraParams) {\n      if (extra in request.extraParams) {\n        params[extra] = request.extraParams[extra];\n      }\n    }\n    if (request.usePKCE && request.codeChallengeMethod) {\n      params.code_challenge_method = request.codeChallengeMethod;\n    }\n    if (request.clientSecret) {\n      params.client_secret = request.clientSecret;\n    }\n    if (request.prompt) {\n      params.prompt = typeof request.prompt === 'string' ? request.prompt : request.prompt.join(' ');\n    }\n    params.redirect_uri = request.redirectUri;\n    params.client_id = request.clientId;\n    params.response_type = request.responseType;\n    params.state = request.state;\n    if (request.scopes?.length) {\n      params.scope = request.scopes.join(' ');\n    }\n    this.url = `${discovery.authorizationEndpoint}?${new URLSearchParams(params)}`;\n    return this.url;\n  }\n  async ensureCodeIsSetupAsync() {\n    if (this.codeVerifier) {\n      return;\n    }\n    const {\n      codeVerifier,\n      codeChallenge\n    } = await PKCE.buildCodeAsync();\n    this.codeVerifier = codeVerifier;\n    this.codeChallenge = codeChallenge;\n  }\n}","map":{"version":3,"names":["WebBrowser","invariant","Platform","CodeChallengeMethod","ResponseType","AuthError","PKCE","QueryParams","TokenResponse","_authLock","AuthRequest","url","constructor","request","responseType","Code","clientId","redirectUri","scopes","clientSecret","prompt","state","generateRandom","extraParams","codeChallengeMethod","S256","usePKCE","__DEV__","console","warn","client_secret","code_challenge_method","Plain","select","web","default","getAuthRequestConfigAsync","ensureCodeIsSetupAsync","codeChallenge","promptAsync","discovery","_ref","options","_objectWithoutPropertiesLoose","_excluded","Object","assign","makeAuthUrlAsync","startUrl","returnUrl","type","result","openAuthSessionAsync","Error","parseReturnUrl","params","errorCode","getQueryParams","error","parsedError","authentication","error_description","access_token","fromQueryParams","code_challenge","extra","join","redirect_uri","client_id","response_type","length","scope","authorizationEndpoint","URLSearchParams","codeVerifier","buildCodeAsync"],"sources":["C:\\Users\\ACER\\Documents\\Capstone\\node_modules\\expo-auth-session\\src\\AuthRequest.ts"],"sourcesContent":["import * as WebBrowser from 'expo-web-browser';\nimport invariant from 'invariant';\nimport { Platform } from 'react-native';\n\nimport {\n  AuthRequestConfig,\n  AuthRequestPromptOptions,\n  CodeChallengeMethod,\n  ResponseType,\n  Prompt,\n  AuthDiscoveryDocument,\n} from './AuthRequest.types';\nimport { AuthSessionResult } from './AuthSession.types';\nimport { AuthError } from './Errors';\nimport * as PKCE from './PKCE';\nimport * as QueryParams from './QueryParams';\nimport { TokenResponse } from './TokenRequest';\n\nlet _authLock: boolean = false;\n\n// @needsAudit @docsMissing\n/**\n * Used to manage an authorization request according to the OAuth spec: [Section 4.1.1](https://tools.ietf.org/html/rfc6749#section-4.1.1).\n * You can use this class directly for more info around the authorization.\n *\n * **Common use-cases:**\n *\n * - Parse a URL returned from the authorization server with `parseReturnUrlAsync()`.\n * - Get the built authorization URL with `makeAuthUrlAsync()`.\n * - Get a loaded JSON representation of the auth request with crypto state loaded with `getAuthRequestConfigAsync()`.\n *\n * @example\n * ```ts\n * // Create a request.\n * const request = new AuthRequest({ ... });\n *\n * // Prompt for an auth code\n * const result = await request.promptAsync(discovery);\n *\n * // Get the URL to invoke\n * const url = await request.makeAuthUrlAsync(discovery);\n *\n * // Get the URL to invoke\n * const parsed = await request.parseReturnUrlAsync(\"<URL From Server>\");\n * ```\n */\nexport class AuthRequest implements Omit<AuthRequestConfig, 'state'> {\n  /**\n   * Used for protection against [Cross-Site Request Forgery](https://tools.ietf.org/html/rfc6749#section-10.12).\n   */\n  public state: string;\n  public url: string | null = null;\n  public codeVerifier?: string;\n  public codeChallenge?: string;\n\n  readonly responseType: ResponseType | string;\n  readonly clientId: string;\n  readonly extraParams: Record<string, string>;\n  readonly usePKCE?: boolean;\n  readonly codeChallengeMethod: CodeChallengeMethod;\n  readonly redirectUri: string;\n  readonly scopes?: string[];\n  readonly clientSecret?: string;\n  readonly prompt?: Prompt | Prompt[];\n\n  constructor(request: AuthRequestConfig) {\n    this.responseType = request.responseType ?? ResponseType.Code;\n    this.clientId = request.clientId;\n    this.redirectUri = request.redirectUri;\n    this.scopes = request.scopes;\n    this.clientSecret = request.clientSecret;\n    this.prompt = request.prompt;\n    this.state = request.state ?? PKCE.generateRandom(10);\n    this.extraParams = request.extraParams ?? {};\n    this.codeChallengeMethod = request.codeChallengeMethod ?? CodeChallengeMethod.S256;\n    // PKCE defaults to true\n    this.usePKCE = request.usePKCE ?? true;\n\n    // Some warnings in development about potential confusing application code\n    if (__DEV__) {\n      if (this.prompt && this.extraParams.prompt) {\n        console.warn(`\\`AuthRequest\\` \\`extraParams.prompt\\` will be overwritten by \\`prompt\\`.`);\n      }\n      if (this.clientSecret && this.extraParams.client_secret) {\n        console.warn(\n          `\\`AuthRequest\\` \\`extraParams.client_secret\\` will be overwritten by \\`clientSecret\\`.`\n        );\n      }\n      if (this.codeChallengeMethod && this.extraParams.code_challenge_method) {\n        console.warn(\n          `\\`AuthRequest\\` \\`extraParams.code_challenge_method\\` will be overwritten by \\`codeChallengeMethod\\`.`\n        );\n      }\n    }\n\n    invariant(\n      this.codeChallengeMethod !== CodeChallengeMethod.Plain,\n      `\\`AuthRequest\\` does not support \\`CodeChallengeMethod.Plain\\` as it's not secure.`\n    );\n    invariant(\n      this.redirectUri,\n      `\\`AuthRequest\\` requires a valid \\`redirectUri\\`. Ex: ${Platform.select({\n        web: 'https://yourwebsite.com/',\n        default: 'com.your.app:/oauthredirect',\n      })}`\n    );\n  }\n\n  /**\n   * Load and return a valid auth request based on the input config.\n   */\n  async getAuthRequestConfigAsync(): Promise<AuthRequestConfig> {\n    if (this.usePKCE) {\n      await this.ensureCodeIsSetupAsync();\n    }\n\n    return {\n      responseType: this.responseType,\n      clientId: this.clientId,\n      redirectUri: this.redirectUri,\n      scopes: this.scopes,\n      clientSecret: this.clientSecret,\n      codeChallenge: this.codeChallenge,\n      codeChallengeMethod: this.codeChallengeMethod,\n      prompt: this.prompt,\n      state: this.state,\n      extraParams: this.extraParams,\n      usePKCE: this.usePKCE,\n    };\n  }\n\n  /**\n   * Prompt a user to authorize for a code.\n   *\n   * @param discovery\n   * @param promptOptions\n   */\n  async promptAsync(\n    discovery: AuthDiscoveryDocument,\n    { url, ...options }: AuthRequestPromptOptions = {}\n  ): Promise<AuthSessionResult> {\n    if (!url) {\n      if (!this.url) {\n        // Generate a new url\n        return this.promptAsync(discovery, {\n          ...options,\n          url: await this.makeAuthUrlAsync(discovery),\n        });\n      }\n      // Reuse the preloaded url\n      url = this.url;\n    }\n\n    // Prevent accidentally starting to an empty url\n    invariant(\n      url,\n      'No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.'\n    );\n\n    const startUrl: string = url!;\n    const returnUrl: string = this.redirectUri;\n\n    // Prevent multiple sessions from running at the same time, WebBrowser doesn't\n    // support it this makes the behavior predictable.\n    if (_authLock) {\n      if (__DEV__) {\n        console.warn(\n          'Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.'\n        );\n      }\n\n      return { type: 'locked' };\n    }\n\n    // About to start session, set lock\n    _authLock = true;\n\n    let result: WebBrowser.WebBrowserAuthSessionResult;\n    try {\n      result = await WebBrowser.openAuthSessionAsync(startUrl, returnUrl, options);\n    } finally {\n      _authLock = false;\n    }\n\n    if (result.type === 'opened') {\n      // This should never happen\n      throw new Error('An unexpected error occurred');\n    }\n    if (result.type !== 'success') {\n      return { type: result.type };\n    }\n\n    return this.parseReturnUrl(result.url);\n  }\n\n  parseReturnUrl(url: string): AuthSessionResult {\n    const { params, errorCode } = QueryParams.getQueryParams(url);\n    const { state, error = errorCode } = params;\n\n    let parsedError: AuthError | null = null;\n    let authentication: TokenResponse | null = null;\n    if (state !== this.state) {\n      // This is a non-standard error\n      parsedError = new AuthError({\n        error: 'state_mismatch',\n        error_description:\n          'Cross-Site request verification failed. Cached state and returned state do not match.',\n      });\n    } else if (error) {\n      parsedError = new AuthError({ error, ...params });\n    }\n    if (params.access_token) {\n      authentication = TokenResponse.fromQueryParams(params);\n    }\n\n    return {\n      type: parsedError ? 'error' : 'success',\n      error: parsedError,\n      url,\n      params,\n      authentication,\n\n      // Return errorCode for legacy\n      errorCode,\n    };\n  }\n\n  /**\n   * Create the URL for authorization.\n   *\n   * @param discovery\n   */\n  async makeAuthUrlAsync(discovery: AuthDiscoveryDocument): Promise<string> {\n    const request = await this.getAuthRequestConfigAsync();\n    if (!request.state) throw new Error('Cannot make request URL without a valid `state` loaded');\n\n    // Create a query string\n    const params: Record<string, string> = {};\n\n    if (request.codeChallenge) {\n      params.code_challenge = request.codeChallenge;\n    }\n\n    // copy over extra params\n    for (const extra in request.extraParams) {\n      if (extra in request.extraParams) {\n        params[extra] = request.extraParams[extra];\n      }\n    }\n\n    if (request.usePKCE && request.codeChallengeMethod) {\n      params.code_challenge_method = request.codeChallengeMethod;\n    }\n\n    if (request.clientSecret) {\n      params.client_secret = request.clientSecret;\n    }\n\n    if (request.prompt) {\n      params.prompt =\n        typeof request.prompt === 'string' ? request.prompt : request.prompt.join(' ');\n    }\n\n    // These overwrite any extra params\n    params.redirect_uri = request.redirectUri;\n    params.client_id = request.clientId;\n    params.response_type = request.responseType!;\n    params.state = request.state;\n\n    if (request.scopes?.length) {\n      params.scope = request.scopes.join(' ');\n    }\n\n    // Store the URL for later\n    this.url = `${discovery.authorizationEndpoint}?${new URLSearchParams(params)}`;\n    return this.url;\n  }\n\n  private async ensureCodeIsSetupAsync(): Promise<void> {\n    if (this.codeVerifier) {\n      return;\n    }\n\n    // This method needs to be resolved like all other native methods.\n    const { codeVerifier, codeChallenge } = await PKCE.buildCodeAsync();\n\n    this.codeVerifier = codeVerifier;\n    this.codeChallenge = codeChallenge;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}