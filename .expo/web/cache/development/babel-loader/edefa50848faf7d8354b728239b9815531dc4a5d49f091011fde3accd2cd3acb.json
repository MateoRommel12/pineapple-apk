{"ast":null,"code":"import { MODULAR_DEPRECATION_ARG } from '@react-native-firebase/app/lib/common';\nimport { deleteApp as deleteAppCompat, getApp as getAppCompat, getApps as getAppsCompat, initializeApp as initializeAppCompat, setLogLevel as setLogLevelCompat } from '../internal';\nimport { setUserLogHandler } from '../internal/logger';\nimport sdkVersion from '../version';\nexport function deleteApp(app) {\n  return deleteAppCompat.call(null, app.name, app._nativeInitialized, MODULAR_DEPRECATION_ARG);\n}\nexport function registerVersion(libraryKeyOrName, version, variant) {\n  throw new Error('registerVersion is only supported on Web');\n}\nexport function onLog(logCallback, options) {\n  setUserLogHandler(logCallback, options);\n}\nexport function getApps() {\n  return getAppsCompat.call(null, MODULAR_DEPRECATION_ARG);\n}\nexport function initializeApp(options, name) {\n  return initializeAppCompat.call(null, options, name, MODULAR_DEPRECATION_ARG);\n}\nexport function getApp(name) {\n  return getAppCompat.call(null, name, MODULAR_DEPRECATION_ARG);\n}\nexport function setLogLevel(logLevel) {\n  return setLogLevelCompat.call(null, logLevel, MODULAR_DEPRECATION_ARG);\n}\nexport const SDK_VERSION = sdkVersion;","map":{"version":3,"names":["MODULAR_DEPRECATION_ARG","deleteApp","deleteAppCompat","getApp","getAppCompat","getApps","getAppsCompat","initializeApp","initializeAppCompat","setLogLevel","setLogLevelCompat","setUserLogHandler","sdkVersion","app","call","name","_nativeInitialized","registerVersion","libraryKeyOrName","version","variant","Error","onLog","logCallback","options","logLevel","SDK_VERSION"],"sources":["C:/Users/ACER/Documents/Capstone/node_modules/@react-native-firebase/app/lib/modular/index.js"],"sourcesContent":["import { MODULAR_DEPRECATION_ARG } from '@react-native-firebase/app/lib/common';\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport {\n  deleteApp as deleteAppCompat,\n  getApp as getAppCompat,\n  getApps as getAppsCompat,\n  initializeApp as initializeAppCompat,\n  setLogLevel as setLogLevelCompat,\n} from '../internal';\nimport { setUserLogHandler } from '../internal/logger';\nimport sdkVersion from '../version';\n\n/**\n * @typedef {import('..').ReactNativeFirebase.FirebaseApp} FirebaseApp\n * @typedef {import('..').ReactNativeFirebase.FirebaseAppOptions} FirebaseAppOptions\n * @typedef {import('..').ReactNativeFirebase.LogLevelString} LogLevelString\n * @typedef {import('../internal/logger').LogCallback} LogCallback\n * @typedef {import('../internal/logger').LogOptions} LogOptions\n */\n\n/**\n * Renders this app unusable and frees the resources of all associated services.\n * @param {FirebaseApp} app - The app to delete.\n * @returns {Promise<void>}\n */\nexport function deleteApp(app) {\n  return deleteAppCompat.call(null, app.name, app._nativeInitialized, MODULAR_DEPRECATION_ARG);\n}\n\n/**\n * Registers a library's name and version for platform logging purposes.\n  @param {string} libraryKeyOrName - library name or key.\n  @param {string} version - library version.\n  @param {string | null} variant - library variant.\n * @returns {Promise<void>}\n */\nexport function registerVersion(libraryKeyOrName, version, variant) {\n  throw new Error('registerVersion is only supported on Web');\n}\n\n/**\n * Sets log handler for VertexAI only currently.\n * @param {LogCallback | null} logCallback - The callback function to handle logs.\n * @param {LogOptions} [options] - Optional settings for log handling.\n * @returns {void}\n */\nexport function onLog(logCallback, options) {\n  setUserLogHandler(logCallback, options);\n}\n\n/**\n * Gets the list of all initialized apps.\n * @returns {FirebaseApp[]} - An array of all initialized Firebase apps.\n */\nexport function getApps() {\n  return getAppsCompat.call(null, MODULAR_DEPRECATION_ARG);\n}\n\n/**\n * Initializes a Firebase app with the provided options and name.\n * @param {FirebaseAppOptions} options - Options to configure the services used in the app.\n * @param {string} [name] - The optional name of the app to initialize ('[DEFAULT]' if omitted).\n * @returns {FirebaseApp} - The initialized Firebase app.\n */\nexport function initializeApp(options, name) {\n  return initializeAppCompat.call(null, options, name, MODULAR_DEPRECATION_ARG);\n}\n\n/**\n * Retrieves an instance of a Firebase app.\n * @param {string} [name] - The optional name of the app to return ('[DEFAULT]' if omitted).\n * @returns {FirebaseApp} - The requested Firebase app instance.\n */\nexport function getApp(name) {\n  return getAppCompat.call(null, name, MODULAR_DEPRECATION_ARG);\n}\n\n/**\n * Sets the log level across all Firebase SDKs.\n * @param {LogLevelString} logLevel - The log level to set ('debug', 'verbose', 'info', 'warn', 'error', 'silent').\n * @returns {void}\n */\nexport function setLogLevel(logLevel) {\n  return setLogLevelCompat.call(null, logLevel, MODULAR_DEPRECATION_ARG);\n}\n\nexport const SDK_VERSION = sdkVersion;\n"],"mappings":"AAAA,SAASA,uBAAuB,QAAQ,uCAAuC;AAE/E,SACEC,SAAS,IAAIC,eAAe,EAC5BC,MAAM,IAAIC,YAAY,EACtBC,OAAO,IAAIC,aAAa,EACxBC,aAAa,IAAIC,mBAAmB,EACpCC,WAAW,IAAIC,iBAAiB,QAC3B,aAAa;AACpB,SAASC,iBAAiB,QAAQ,oBAAoB;AACtD,OAAOC,UAAU,MAAM,YAAY;AAenC,OAAO,SAASX,SAASA,CAACY,GAAG,EAAE;EAC7B,OAAOX,eAAe,CAACY,IAAI,CAAC,IAAI,EAAED,GAAG,CAACE,IAAI,EAAEF,GAAG,CAACG,kBAAkB,EAAEhB,uBAAuB,CAAC;AAC9F;AASA,OAAO,SAASiB,eAAeA,CAACC,gBAAgB,EAAEC,OAAO,EAAEC,OAAO,EAAE;EAClE,MAAM,IAAIC,KAAK,CAAC,0CAA0C,CAAC;AAC7D;AAQA,OAAO,SAASC,KAAKA,CAACC,WAAW,EAAEC,OAAO,EAAE;EAC1Cb,iBAAiB,CAACY,WAAW,EAAEC,OAAO,CAAC;AACzC;AAMA,OAAO,SAASnB,OAAOA,CAAA,EAAG;EACxB,OAAOC,aAAa,CAACQ,IAAI,CAAC,IAAI,EAAEd,uBAAuB,CAAC;AAC1D;AAQA,OAAO,SAASO,aAAaA,CAACiB,OAAO,EAAET,IAAI,EAAE;EAC3C,OAAOP,mBAAmB,CAACM,IAAI,CAAC,IAAI,EAAEU,OAAO,EAAET,IAAI,EAAEf,uBAAuB,CAAC;AAC/E;AAOA,OAAO,SAASG,MAAMA,CAACY,IAAI,EAAE;EAC3B,OAAOX,YAAY,CAACU,IAAI,CAAC,IAAI,EAAEC,IAAI,EAAEf,uBAAuB,CAAC;AAC/D;AAOA,OAAO,SAASS,WAAWA,CAACgB,QAAQ,EAAE;EACpC,OAAOf,iBAAiB,CAACI,IAAI,CAAC,IAAI,EAAEW,QAAQ,EAAEzB,uBAAuB,CAAC;AACxE;AAEA,OAAO,MAAM0B,WAAW,GAAGd,UAAU","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}