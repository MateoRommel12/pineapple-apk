{"ast":null,"code":"const LogLevel = {\n  DEBUG: 0,\n  VERBOSE: 1,\n  INFO: 2,\n  WARN: 3,\n  ERROR: 4,\n  SILENT: 5\n};\nconst reverseLogLevel = obj => {\n  const reversed = {};\n  for (const [key, value] of Object.entries(obj)) {\n    reversed[value] = key;\n  }\n  return reversed;\n};\nconst LogLevelReversed = reverseLogLevel(LogLevel);\nconst levelStringToEnum = {\n  debug: LogLevel.DEBUG,\n  verbose: LogLevel.VERBOSE,\n  info: LogLevel.INFO,\n  warn: LogLevel.WARN,\n  error: LogLevel.ERROR,\n  silent: LogLevel.SILENT\n};\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\nconst defaultLogHandler = (instance, logType, ...args) => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType];\n  if (method) {\n    console[method](`[${now}]  ${instance.name}:`, ...args);\n  } else {\n    throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\n  }\n};\nconst defaultLogLevel = LogLevel.INFO;\nexport const instances = [];\nexport class Logger {\n  constructor(name) {\n    this.name = name;\n    instances.push(this);\n  }\n  _logLevel = defaultLogLevel;\n  get logLevel() {\n    return this._logLevel;\n  }\n  set logLevel(val) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n  setLogLevel(val) {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n  _logHandler = defaultLogHandler;\n  get logHandler() {\n    return this._logHandler;\n  }\n  set logHandler(val) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n  _userLogHandler = null;\n  get userLogHandler() {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val) {\n    this._userLogHandler = val;\n  }\n  debug(...args) {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args) {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args) {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args) {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args) {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\nexport function setLogLevelInternal(level) {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\nexport function setUserLogHandler(logCallback, options) {\n  for (const instance of instances) {\n    let customLogLevel = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (instance, level, ...args) => {\n        const message = args.map(arg => {\n          if (arg == null) {\n            return null;\n          } else if (typeof arg === 'string') {\n            return arg;\n          } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n            return arg.toString();\n          } else if (arg instanceof Error) {\n            return arg.message;\n          } else {\n            try {\n              return JSON.stringify(arg);\n            } catch (_ignored) {\n              return null;\n            }\n          }\n        }).filter(arg => arg).join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevelReversed[level].toLowerCase(),\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}","map":{"version":3,"names":["LogLevel","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","reverseLogLevel","obj","reversed","key","value","Object","entries","LogLevelReversed","levelStringToEnum","debug","verbose","info","warn","error","silent","ConsoleMethod","defaultLogHandler","instance","logType","args","logLevel","now","Date","toISOString","method","console","name","Error","defaultLogLevel","instances","Logger","constructor","push","_logLevel","val","TypeError","setLogLevel","_logHandler","logHandler","_userLogHandler","userLogHandler","log","setLogLevelInternal","level","forEach","inst","setUserLogHandler","logCallback","options","customLogLevel","message","map","arg","toString","JSON","stringify","_ignored","filter","join","toLowerCase","type"],"sources":["C:/Users/ACER/Documents/Capstone/node_modules/@react-native-firebase/app/lib/internal/logger.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n/**\n * @typedef {import('./logger').Logger} Logger\n * @typedef {import('./logger').setLogLevel} setLogLevel\n * @typedef {import('./logger').setUserLogHandler} setUserLogHandler\n * @typedef {import('./logger').LogHandler} LogHandler\n * @typedef {import('./logger').LogLevel} LogLevel\n * @typedef {import('./logger').LevelStringToEnum} LevelStringToEnum\n * @typedef {import('./logger').DefaultLogLevel} DefaultLogLevel\n */\n\nconst LogLevel = {\n  DEBUG: 0,\n  VERBOSE: 1,\n  INFO: 2,\n  WARN: 3,\n  ERROR: 4,\n  SILENT: 5,\n};\n\n// mimic the LogLevel in firebase-js-sdk TS\nconst reverseLogLevel = obj => {\n  const reversed = {};\n  for (const [key, value] of Object.entries(obj)) {\n    reversed[value] = key;\n  }\n  return reversed;\n};\n\nconst LogLevelReversed = reverseLogLevel(LogLevel);\n\nconst levelStringToEnum = {\n  debug: LogLevel.DEBUG,\n  verbose: LogLevel.VERBOSE,\n  info: LogLevel.INFO,\n  warn: LogLevel.WARN,\n  error: LogLevel.ERROR,\n  silent: LogLevel.SILENT,\n};\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error',\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n * @type {LogHandler}\n */\nconst defaultLogHandler = (instance, logType, ...args) => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType];\n  if (method) {\n    // 'log' | 'info' | 'warn' | 'error'\n    // eslint-disable-next-line no-console\n    console[method](`[${now}]  ${instance.name}:`, ...args);\n  } else {\n    throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\n  }\n};\n\nconst defaultLogLevel = LogLevel.INFO;\n\nexport const instances = [];\n\n/**\n * @type {Logger}\n */\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(name) {\n    /**\n     * Capture the current instance for later use\n     */\n    this.name = name;\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  _logLevel = defaultLogLevel;\n\n  get logLevel() {\n    return this._logLevel;\n  }\n\n  set logLevel(val) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val) {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  _logHandler = defaultLogHandler;\n  get logHandler() {\n    return this._logHandler;\n  }\n  set logHandler(val) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  _userLogHandler = null;\n  get userLogHandler() {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args) {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args) {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args) {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args) {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args) {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\n/**\n * @type {setLogLevel}\n */\nexport function setLogLevelInternal(level) {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\n/**\n * @type {setUserLogHandler}\n */\nexport function setUserLogHandler(logCallback, options) {\n  for (const instance of instances) {\n    let customLogLevel = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (instance, level, ...args) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (_ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevelReversed[level].toLowerCase(),\n            message,\n            args,\n            type: instance.name,\n          });\n        }\n      };\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}