{"ast":null,"code":"import Constants, { ExecutionEnvironment } from 'expo-constants';\nimport * as Linking from 'expo-linking';\nimport { Platform } from 'expo-modules-core';\nexport class SessionUrlProvider {\n  static BASE_URL = `https://auth.expo.io`;\n  static SESSION_PATH = 'expo-auth-session';\n  getDefaultReturnUrl(urlPath, options) {\n    const queryParams = SessionUrlProvider.getHostAddressQueryParams();\n    let path = SessionUrlProvider.SESSION_PATH;\n    if (urlPath) {\n      path = [path, SessionUrlProvider.removeLeadingSlash(urlPath)].filter(Boolean).join('/');\n    }\n    return Linking.createURL(path, {\n      scheme: options?.scheme ?? Linking.resolveScheme({\n        isSilent: true\n      }),\n      queryParams,\n      isTripleSlashed: options?.isTripleSlashed\n    });\n  }\n  getStartUrl(authUrl, returnUrl, projectNameForProxy) {\n    if (Platform.OS === 'web' && !Platform.isDOMAvailable) {\n      return '';\n    }\n    const queryString = new URLSearchParams({\n      authUrl,\n      returnUrl\n    });\n    return `${this.getRedirectUrl({\n      projectNameForProxy\n    })}/start?${queryString}`;\n  }\n  getRedirectUrl(options) {\n    if (Platform.OS === 'web') {\n      if (Platform.isDOMAvailable) {\n        return [window.location.origin, options.urlPath].filter(Boolean).join('/');\n      } else {\n        return '';\n      }\n    }\n    const legacyExpoProjectFullName = options.projectNameForProxy || Constants.expoConfig?.originalFullName;\n    if (!legacyExpoProjectFullName) {\n      let nextSteps = '';\n      if (__DEV__) {\n        if (Constants.executionEnvironment === ExecutionEnvironment.Bare) {\n          nextSteps = ' Please ensure you have the latest version of expo-constants installed and rebuild your native app. You can verify that originalFullName is defined by running `expo config --type public` and inspecting the output.';\n        } else if (Constants.executionEnvironment === ExecutionEnvironment.StoreClient) {\n          nextSteps = ' Please report this as a bug with the contents of `expo config --type public`.';\n        }\n      }\n      if (Constants.manifest2) {\n        nextSteps = ' Prefer AuthRequest in combination with an Expo Development Client build of your application.' + ' To continue using the AuthSession proxy, specify the project full name (@owner/slug) using the projectNameForProxy option.';\n      }\n      throw new Error('Cannot use the AuthSession proxy because the project full name is not defined.' + nextSteps);\n    }\n    const redirectUrl = `${SessionUrlProvider.BASE_URL}/${legacyExpoProjectFullName}`;\n    if (__DEV__) {\n      SessionUrlProvider.warnIfAnonymous(legacyExpoProjectFullName, redirectUrl);\n    }\n    return redirectUrl;\n  }\n  static getHostAddressQueryParams() {\n    let hostUri = Constants.expoConfig?.hostUri;\n    if (!hostUri && (ExecutionEnvironment.StoreClient === Constants.executionEnvironment || Linking.resolveScheme({}))) {\n      if (!Constants.linkingUri) {\n        hostUri = '';\n      } else {\n        hostUri = SessionUrlProvider.removeScheme(Constants.linkingUri).replace(/\\/--(\\/.*)?$/, '');\n      }\n    }\n    if (!hostUri) {\n      return undefined;\n    }\n    const uriParts = hostUri?.split('?');\n    try {\n      return Object.fromEntries(new URLSearchParams(uriParts?.[1]));\n    } catch {}\n    return undefined;\n  }\n  static warnIfAnonymous(id, url) {\n    if (id.startsWith('@anonymous/')) {\n      console.warn(`You are not currently signed in to Expo on your development machine. As a result, the redirect URL for AuthSession will be \"${url}\". If you are using an OAuth provider that requires adding redirect URLs to an allow list, we recommend that you do not add this URL -- instead, you should sign in to Expo to acquire a unique redirect URL. Additionally, if you do decide to publish this app using Expo, you will need to register an account to do it.`);\n    }\n  }\n  static removeScheme(url) {\n    return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//, '');\n  }\n  static removeLeadingSlash(url) {\n    return url.replace(/^\\//, '');\n  }\n}\nexport default new SessionUrlProvider();","map":{"version":3,"names":["Constants","ExecutionEnvironment","Linking","Platform","SessionUrlProvider","BASE_URL","SESSION_PATH","getDefaultReturnUrl","urlPath","options","queryParams","getHostAddressQueryParams","path","removeLeadingSlash","filter","Boolean","join","createURL","scheme","resolveScheme","isSilent","isTripleSlashed","getStartUrl","authUrl","returnUrl","projectNameForProxy","OS","isDOMAvailable","queryString","URLSearchParams","getRedirectUrl","window","location","origin","legacyExpoProjectFullName","expoConfig","originalFullName","nextSteps","__DEV__","executionEnvironment","Bare","StoreClient","manifest2","Error","redirectUrl","warnIfAnonymous","hostUri","linkingUri","removeScheme","replace","undefined","uriParts","split","Object","fromEntries","id","url","startsWith","console","warn"],"sources":["C:\\Users\\ACER\\Documents\\Capstone\\node_modules\\expo-auth-session\\src\\SessionUrlProvider.ts"],"sourcesContent":["import Constants, { ExecutionEnvironment } from 'expo-constants';\nimport * as Linking from 'expo-linking';\nimport { Platform } from 'expo-modules-core';\n\nexport class SessionUrlProvider {\n  private static readonly BASE_URL = `https://auth.expo.io`;\n  private static readonly SESSION_PATH = 'expo-auth-session';\n\n  getDefaultReturnUrl(\n    urlPath?: string,\n    options?: Omit<Linking.CreateURLOptions, 'queryParams'>\n  ): string {\n    const queryParams = SessionUrlProvider.getHostAddressQueryParams();\n    let path = SessionUrlProvider.SESSION_PATH;\n    if (urlPath) {\n      path = [path, SessionUrlProvider.removeLeadingSlash(urlPath)].filter(Boolean).join('/');\n    }\n\n    return Linking.createURL(path, {\n      // The redirect URL doesn't matter for the proxy as long as it's valid, so silence warnings if needed.\n      scheme: options?.scheme ?? Linking.resolveScheme({ isSilent: true }),\n      queryParams,\n      isTripleSlashed: options?.isTripleSlashed,\n    });\n  }\n\n  getStartUrl(authUrl: string, returnUrl: string, projectNameForProxy: string | undefined): string {\n    if (Platform.OS === 'web' && !Platform.isDOMAvailable) {\n      // Return nothing in SSR envs\n      return '';\n    }\n    const queryString = new URLSearchParams({\n      authUrl,\n      returnUrl,\n    });\n\n    return `${this.getRedirectUrl({ projectNameForProxy })}/start?${queryString}`;\n  }\n\n  getRedirectUrl(options: { projectNameForProxy?: string; urlPath?: string }): string {\n    if (Platform.OS === 'web') {\n      if (Platform.isDOMAvailable) {\n        return [window.location.origin, options.urlPath].filter(Boolean).join('/');\n      } else {\n        // Return nothing in SSR envs\n        return '';\n      }\n    }\n\n    const legacyExpoProjectFullName =\n      options.projectNameForProxy || Constants.expoConfig?.originalFullName;\n\n    if (!legacyExpoProjectFullName) {\n      let nextSteps = '';\n      if (__DEV__) {\n        if (Constants.executionEnvironment === ExecutionEnvironment.Bare) {\n          nextSteps =\n            ' Please ensure you have the latest version of expo-constants installed and rebuild your native app. You can verify that originalFullName is defined by running `expo config --type public` and inspecting the output.';\n        } else if (Constants.executionEnvironment === ExecutionEnvironment.StoreClient) {\n          nextSteps =\n            ' Please report this as a bug with the contents of `expo config --type public`.';\n        }\n      }\n\n      if (Constants.manifest2) {\n        nextSteps =\n          ' Prefer AuthRequest in combination with an Expo Development Client build of your application.' +\n          ' To continue using the AuthSession proxy, specify the project full name (@owner/slug) using the projectNameForProxy option.';\n      }\n\n      throw new Error(\n        'Cannot use the AuthSession proxy because the project full name is not defined.' + nextSteps\n      );\n    }\n\n    const redirectUrl = `${SessionUrlProvider.BASE_URL}/${legacyExpoProjectFullName}`;\n    if (__DEV__) {\n      SessionUrlProvider.warnIfAnonymous(legacyExpoProjectFullName, redirectUrl);\n      // TODO: Verify with the dev server that the manifest is up to date.\n    }\n    return redirectUrl;\n  }\n\n  private static getHostAddressQueryParams(): Record<string, string> | undefined {\n    let hostUri: string | undefined = Constants.expoConfig?.hostUri;\n    if (\n      !hostUri &&\n      (ExecutionEnvironment.StoreClient === Constants.executionEnvironment ||\n        Linking.resolveScheme({}))\n    ) {\n      if (!Constants.linkingUri) {\n        hostUri = '';\n      } else {\n        // we're probably not using up-to-date xdl, so just fake it for now\n        // we have to remove the /--/ on the end since this will be inserted again later\n        hostUri = SessionUrlProvider.removeScheme(Constants.linkingUri).replace(/\\/--(\\/.*)?$/, '');\n      }\n    }\n\n    if (!hostUri) {\n      return undefined;\n    }\n\n    const uriParts = hostUri?.split('?');\n    try {\n      return Object.fromEntries(\n        // @ts-ignore: [Symbol.iterator] is indeed, available on every platform.\n        new URLSearchParams(uriParts?.[1])\n      );\n    } catch {}\n\n    return undefined;\n  }\n\n  private static warnIfAnonymous(id, url): void {\n    if (id.startsWith('@anonymous/')) {\n      console.warn(\n        `You are not currently signed in to Expo on your development machine. As a result, the redirect URL for AuthSession will be \"${url}\". If you are using an OAuth provider that requires adding redirect URLs to an allow list, we recommend that you do not add this URL -- instead, you should sign in to Expo to acquire a unique redirect URL. Additionally, if you do decide to publish this app using Expo, you will need to register an account to do it.`\n      );\n    }\n  }\n\n  private static removeScheme(url: string) {\n    return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//, '');\n  }\n\n  private static removeLeadingSlash(url: string) {\n    return url.replace(/^\\//, '');\n  }\n}\n\nexport default new SessionUrlProvider();\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}