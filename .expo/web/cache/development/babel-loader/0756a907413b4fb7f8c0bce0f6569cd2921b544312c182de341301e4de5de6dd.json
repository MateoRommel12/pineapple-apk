{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"windowFeatures\"];\nimport { useCallback, useMemo, useEffect, useState } from 'react';\nimport { AuthRequest } from './AuthRequest';\nimport { resolveDiscoveryAsync } from './Discovery';\nexport function useAutoDiscovery(issuerOrDiscovery) {\n  const [discovery, setDiscovery] = useState(null);\n  useEffect(() => {\n    let isAllowed = true;\n    resolveDiscoveryAsync(issuerOrDiscovery).then(discovery => {\n      if (isAllowed) {\n        setDiscovery(discovery);\n      }\n    });\n    return () => {\n      isAllowed = false;\n    };\n  }, [issuerOrDiscovery]);\n  return discovery;\n}\nexport function useLoadedAuthRequest(config, discovery, AuthRequestInstance) {\n  const [request, setRequest] = useState(null);\n  const scopeString = config.scopes?.join(' ');\n  const promptString = createPromptString(config.prompt);\n  const extraParamsString = useMemo(() => JSON.stringify(config.extraParams || {}), [config.extraParams]);\n  useEffect(() => {\n    let isMounted = true;\n    if (discovery) {\n      const request = new AuthRequestInstance(config);\n      request.makeAuthUrlAsync(discovery).then(() => {\n        if (isMounted) {\n          setRequest(request);\n        }\n      });\n    }\n    return () => {\n      isMounted = false;\n    };\n  }, [discovery?.authorizationEndpoint, config.clientId, config.redirectUri, config.responseType, config.clientSecret, config.codeChallenge, config.state, config.usePKCE, scopeString, promptString, extraParamsString]);\n  return request;\n}\nfunction createPromptString(prompt) {\n  if (!prompt) {\n    return;\n  }\n  if (Array.isArray(prompt)) {\n    return prompt.join(' ');\n  }\n  return prompt;\n}\nexport function useAuthRequestResult(request, discovery, customOptions = {}) {\n  const [result, setResult] = useState(null);\n  const promptAsync = useCallback(async (_ref = {}) => {\n    let {\n        windowFeatures = {}\n      } = _ref,\n      options = _objectWithoutPropertiesLoose(_ref, _excluded);\n    if (!discovery || !request) {\n      throw new Error('Cannot prompt to authenticate until the request has finished loading.');\n    }\n    const inputOptions = Object.assign({}, customOptions, options, {\n      windowFeatures: Object.assign({}, customOptions.windowFeatures ?? {}, windowFeatures)\n    });\n    const result = await request?.promptAsync(discovery, inputOptions);\n    setResult(result);\n    return result;\n  }, [request?.url, discovery?.authorizationEndpoint]);\n  return [result, promptAsync];\n}\nexport function useAuthRequest(config, discovery) {\n  const request = useLoadedAuthRequest(config, discovery, AuthRequest);\n  const [result, promptAsync] = useAuthRequestResult(request, discovery);\n  return [request, result, promptAsync];\n}","map":{"version":3,"names":["useCallback","useMemo","useEffect","useState","AuthRequest","resolveDiscoveryAsync","useAutoDiscovery","issuerOrDiscovery","discovery","setDiscovery","isAllowed","then","useLoadedAuthRequest","config","AuthRequestInstance","request","setRequest","scopeString","scopes","join","promptString","createPromptString","prompt","extraParamsString","JSON","stringify","extraParams","isMounted","makeAuthUrlAsync","authorizationEndpoint","clientId","redirectUri","responseType","clientSecret","codeChallenge","state","usePKCE","Array","isArray","useAuthRequestResult","customOptions","result","setResult","promptAsync","_ref","windowFeatures","options","_objectWithoutPropertiesLoose","_excluded","Error","inputOptions","Object","assign","url","useAuthRequest"],"sources":["C:\\Users\\ACER\\Documents\\Capstone\\node_modules\\expo-auth-session\\src\\AuthRequestHooks.ts"],"sourcesContent":["import { useCallback, useMemo, useEffect, useState } from 'react';\n\nimport { AuthRequest } from './AuthRequest';\nimport { AuthRequestConfig, AuthRequestPromptOptions, Prompt } from './AuthRequest.types';\nimport { AuthSessionResult } from './AuthSession.types';\nimport { DiscoveryDocument, IssuerOrDiscovery, resolveDiscoveryAsync } from './Discovery';\n\n// @needsAudit\n/**\n * Given an OpenID Connect issuer URL, this will fetch and return the [`DiscoveryDocument`](#discoverydocument)\n * (a collection of URLs) from the resource provider.\n *\n * @param issuerOrDiscovery URL using the `https` scheme with no query or fragment component that the OP asserts as its Issuer Identifier.\n * @return Returns `null` until the [`DiscoveryDocument`](#discoverydocument) has been fetched from the provided issuer URL.\n *\n * @example\n * ```ts\n * const discovery = useAutoDiscovery('https://example.com/auth');\n * ```\n */\nexport function useAutoDiscovery(issuerOrDiscovery: IssuerOrDiscovery): DiscoveryDocument | null {\n  const [discovery, setDiscovery] = useState<DiscoveryDocument | null>(null);\n\n  useEffect(() => {\n    let isAllowed = true;\n    resolveDiscoveryAsync(issuerOrDiscovery).then((discovery) => {\n      if (isAllowed) {\n        setDiscovery(discovery);\n      }\n    });\n\n    return () => {\n      isAllowed = false;\n    };\n  }, [issuerOrDiscovery]);\n\n  return discovery;\n}\n\nexport function useLoadedAuthRequest(\n  config: AuthRequestConfig,\n  discovery: DiscoveryDocument | null,\n  AuthRequestInstance: typeof AuthRequest\n): AuthRequest | null {\n  const [request, setRequest] = useState<AuthRequest | null>(null);\n  const scopeString = config.scopes?.join(' ');\n  const promptString = createPromptString(config.prompt);\n  const extraParamsString = useMemo(\n    () => JSON.stringify(config.extraParams || {}),\n    [config.extraParams]\n  );\n  useEffect(() => {\n    let isMounted = true;\n\n    if (discovery) {\n      const request = new AuthRequestInstance(config);\n      request.makeAuthUrlAsync(discovery).then(() => {\n        if (isMounted) {\n          setRequest(request);\n        }\n      });\n    }\n    return () => {\n      isMounted = false;\n    };\n  }, [\n    discovery?.authorizationEndpoint,\n    config.clientId,\n    config.redirectUri,\n    config.responseType,\n    config.clientSecret,\n    config.codeChallenge,\n    config.state,\n    config.usePKCE,\n    scopeString,\n    promptString,\n    extraParamsString,\n  ]);\n  return request;\n}\n\n/**\n * @returns Prompt type converted to a primitive value to be used as a React hook dependency\n */\nfunction createPromptString(prompt: Prompt | Prompt[] | undefined): string | undefined {\n  if (!prompt) {\n    return;\n  }\n\n  if (Array.isArray(prompt)) {\n    return prompt.join(' ');\n  }\n\n  return prompt;\n}\n\nexport type PromptMethod = (options?: AuthRequestPromptOptions) => Promise<AuthSessionResult>;\n\nexport function useAuthRequestResult(\n  request: AuthRequest | null,\n  discovery: DiscoveryDocument | null,\n  customOptions: AuthRequestPromptOptions = {}\n): [AuthSessionResult | null, PromptMethod] {\n  const [result, setResult] = useState<AuthSessionResult | null>(null);\n\n  const promptAsync = useCallback(\n    async ({ windowFeatures = {}, ...options }: AuthRequestPromptOptions = {}) => {\n      if (!discovery || !request) {\n        throw new Error('Cannot prompt to authenticate until the request has finished loading.');\n      }\n      const inputOptions = {\n        ...customOptions,\n        ...options,\n        windowFeatures: {\n          ...(customOptions.windowFeatures ?? {}),\n          ...windowFeatures,\n        },\n      };\n      const result = await request?.promptAsync(discovery, inputOptions);\n      setResult(result);\n      return result;\n    },\n    [request?.url, discovery?.authorizationEndpoint]\n  );\n\n  return [result, promptAsync];\n}\n\n// @needsAudit\n/**\n * Load an authorization request for a code. When the prompt method completes then the response will be fulfilled.\n *\n * > In order to close the popup window on web, you need to invoke `WebBrowser.maybeCompleteAuthSession()`.\n * > See the [Identity example](/guides/authentication#identityserver-4) for more info.\n *\n * If an Implicit grant flow was used, you can pass the `response.params` to `TokenResponse.fromQueryParams()`\n * to get a `TokenResponse` instance which you can use to easily refresh the token.\n *\n * @param config A valid [`AuthRequestConfig`](#authrequestconfig) that specifies what provider to use.\n * @param discovery A loaded [`DiscoveryDocument`](#discoverydocument) with endpoints used for authenticating.\n * Only `authorizationEndpoint` is required for requesting an authorization code.\n *\n * @return Returns a loaded request, a response, and a prompt method in a single array in the following order:\n * - `request` - An instance of [`AuthRequest`](#authrequest) that can be used to prompt the user for authorization.\n *   This will be `null` until the auth request has finished loading.\n * - `response` - This is `null` until `promptAsync` has been invoked. Once fulfilled it will return information about the authorization.\n * - `promptAsync` - When invoked, a web browser will open up and prompt the user for authentication.\n *   Accepts an [`AuthRequestPromptOptions`](#authrequestpromptoptions) object with options about how the prompt will execute.\n *\n * @example\n * ```ts\n * const [request, response, promptAsync] = useAuthRequest({ ... }, { ... });\n * ```\n */\nexport function useAuthRequest(\n  config: AuthRequestConfig,\n  discovery: DiscoveryDocument | null\n): [\n  AuthRequest | null,\n  AuthSessionResult | null,\n  (options?: AuthRequestPromptOptions) => Promise<AuthSessionResult>,\n] {\n  const request = useLoadedAuthRequest(config, discovery, AuthRequest);\n  const [result, promptAsync] = useAuthRequestResult(request, discovery);\n  return [request, result, promptAsync];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}