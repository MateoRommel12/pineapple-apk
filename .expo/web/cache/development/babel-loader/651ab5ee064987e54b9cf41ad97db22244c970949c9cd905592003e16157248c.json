{"ast":null,"code":"import { getApp } from '@react-native-firebase/app';\nexport function getAuth(app) {\n  if (app) {\n    return getApp(app.name).auth();\n  }\n  return getApp().auth();\n}\nexport function initializeAuth(app, deps) {\n  if (app) {\n    return getApp(app.name).auth();\n  }\n  return getApp().auth();\n}\nexport async function applyActionCode(auth, oobCode) {\n  return auth.applyActionCode(oobCode);\n}\nexport function beforeAuthStateChanged(auth, callback, onAbort) {\n  throw new Error('beforeAuthStateChanged is unsupported by the native Firebase SDKs');\n}\nexport async function checkActionCode(auth, oobCode) {\n  return auth.checkActionCode(oobCode);\n}\nexport async function confirmPasswordReset(auth, oobCode, newPassword) {\n  return auth.confirmPasswordReset(oobCode, newPassword);\n}\nexport function connectAuthEmulator(auth, url, options) {\n  auth.useEmulator(url, options);\n}\nexport async function createUserWithEmailAndPassword(auth, email, password) {\n  return auth.createUserWithEmailAndPassword(email, password);\n}\nexport async function fetchSignInMethodsForEmail(auth, email) {\n  return auth.fetchSignInMethodsForEmail(email);\n}\nexport function getMultiFactorResolver(auth, error) {\n  return auth.getMultiFactorResolver(error);\n}\nexport async function getRedirectResult(auth, resolver) {\n  throw new Error('getRedirectResult is unsupported by the native Firebase SDKs');\n}\nexport function isSignInWithEmailLink(auth, emailLink) {\n  return auth.isSignInWithEmailLink(emailLink);\n}\nexport function onAuthStateChanged(auth, nextOrObserver) {\n  return auth.onAuthStateChanged(nextOrObserver);\n}\nexport function onIdTokenChanged(auth, nextOrObserver) {\n  return auth.onIdTokenChanged(nextOrObserver);\n}\nexport async function sendPasswordResetEmail(auth, email, actionCodeSettings) {\n  return auth.sendPasswordResetEmail(email, actionCodeSettings);\n}\nexport async function sendSignInLinkToEmail(auth, email, actionCodeSettings) {\n  return auth.sendSignInLinkToEmail(email, actionCodeSettings);\n}\nexport async function setPersistence(auth, persistence) {\n  throw new Error('setPersistence is unsupported by the native Firebase SDKs');\n}\nexport async function signInAnonymously(auth) {\n  return auth.signInAnonymously();\n}\nexport async function signInWithCredential(auth, credential) {\n  return auth.signInWithCredential(credential);\n}\nexport async function signInWithCustomToken(auth, customToken) {\n  return auth.signInWithCustomToken(customToken);\n}\nexport async function signInWithEmailAndPassword(auth, email, password) {\n  return auth.signInWithEmailAndPassword(email, password);\n}\nexport async function signInWithEmailLink(auth, email, emailLink) {\n  return auth.signInWithEmailLink(email, emailLink);\n}\nexport async function signInWithPhoneNumber(auth, phoneNumber, appVerifier) {\n  return auth.signInWithPhoneNumber(phoneNumber, appVerifier);\n}\nexport function verifyPhoneNumber(auth, phoneNumber, autoVerifyTimeoutOrForceResend, forceResend) {\n  return auth.verifyPhoneNumber(phoneNumber, autoVerifyTimeoutOrForceResend, forceResend);\n}\nexport async function signInWithPopup(auth, provider, resolver) {\n  return auth.signInWithPopup(provider, resolver);\n}\nexport async function signInWithRedirect(auth, provider, resolver) {\n  return auth.signInWithRedirect(provider, resolver);\n}\nexport async function signOut(auth) {\n  return auth.signOut();\n}\nexport async function updateCurrentUser(auth, user) {\n  throw new Error('updateCurrentUser is unsupported by the native Firebase SDKs');\n}\nexport function useDeviceLanguage(auth) {\n  throw new Error('useDeviceLanguage is unsupported by the native Firebase SDKs');\n}\nexport function useUserAccessGroup(auth, userAccessGroup) {\n  return auth.useUserAccessGroup(userAccessGroup);\n}\nexport async function verifyPasswordResetCode(auth, code) {\n  return auth.verifyPasswordResetCode(code);\n}\nexport function parseActionCodeURL(link) {\n  throw new Error('parseActionCodeURL is unsupported by the native Firebase SDKs');\n}\nexport async function deleteUser(user) {\n  return user.delete();\n}\nexport async function getIdToken(user, forceRefresh) {\n  return user.getIdToken(forceRefresh);\n}\nexport async function getIdTokenResult(user, forceRefresh) {\n  return user.getIdTokenResult(forceRefresh);\n}\nexport async function linkWithCredential(user, credential) {\n  return user.linkWithCredential(credential);\n}\nexport async function linkWithPhoneNumber(user, phoneNumber, appVerifier) {\n  throw new Error('linkWithPhoneNumber is unsupported by the native Firebase SDKs');\n}\nexport async function linkWithPopup(user, provider, resolver) {\n  return user.linkWithPopup(provider, resolver);\n}\nexport async function linkWithRedirect(user, provider, resolver) {\n  return user.linkWithRedirect(provider, resolver);\n}\nexport function multiFactor(user) {\n  return user._auth.multiFactor(user);\n}\nexport async function reauthenticateWithCredential(user, credential) {\n  return user.reauthenticateWithCredential(credential);\n}\nexport async function reauthenticateWithPhoneNumber(user, phoneNumber, appVerifier) {\n  throw new Error('reauthenticateWithPhoneNumber is unsupported by the native Firebase SDKs');\n}\nexport async function reauthenticateWithPopup(user, provider, resolver) {\n  return user.reauthenticateWithPopup(provider, resolver);\n}\nexport async function reauthenticateWithRedirect(user, provider, resolver) {\n  return user.reauthenticateWithRedirect(provider, resolver);\n}\nexport async function reload(user) {\n  return user.reload();\n}\nexport async function sendEmailVerification(user, actionCodeSettings) {\n  return user.sendEmailVerification(actionCodeSettings);\n}\nexport async function unlink(user, providerId) {\n  return user.unlink(providerId);\n}\nexport async function updateEmail(user, newEmail) {\n  return user.updateEmail(newEmail);\n}\nexport async function updatePassword(user, newPassword) {\n  return user.updatePassword(newPassword);\n}\nexport async function updatePhoneNumber(user, credential) {\n  return user.updatePhoneNumber(credential);\n}\nexport async function updateProfile(user, {\n  displayName,\n  photoURL: photoUrl\n}) {\n  return user.updateProfile({\n    displayName,\n    photoURL: photoUrl\n  });\n}\nexport async function verifyBeforeUpdateEmail(user, newEmail, actionCodeSettings) {\n  return user.verifyBeforeUpdateEmail(newEmail, actionCodeSettings);\n}\nexport function getAdditionalUserInfo(userCredential) {\n  return userCredential.additionalUserInfo;\n}\nexport function getCustomAuthDomain(auth) {\n  return auth.getCustomAuthDomain();\n}","map":{"version":3,"names":["getApp","getAuth","app","name","auth","initializeAuth","deps","applyActionCode","oobCode","beforeAuthStateChanged","callback","onAbort","Error","checkActionCode","confirmPasswordReset","newPassword","connectAuthEmulator","url","options","useEmulator","createUserWithEmailAndPassword","email","password","fetchSignInMethodsForEmail","getMultiFactorResolver","error","getRedirectResult","resolver","isSignInWithEmailLink","emailLink","onAuthStateChanged","nextOrObserver","onIdTokenChanged","sendPasswordResetEmail","actionCodeSettings","sendSignInLinkToEmail","setPersistence","persistence","signInAnonymously","signInWithCredential","credential","signInWithCustomToken","customToken","signInWithEmailAndPassword","signInWithEmailLink","signInWithPhoneNumber","phoneNumber","appVerifier","verifyPhoneNumber","autoVerifyTimeoutOrForceResend","forceResend","signInWithPopup","provider","signInWithRedirect","signOut","updateCurrentUser","user","useDeviceLanguage","useUserAccessGroup","userAccessGroup","verifyPasswordResetCode","code","parseActionCodeURL","link","deleteUser","delete","getIdToken","forceRefresh","getIdTokenResult","linkWithCredential","linkWithPhoneNumber","linkWithPopup","linkWithRedirect","multiFactor","_auth","reauthenticateWithCredential","reauthenticateWithPhoneNumber","reauthenticateWithPopup","reauthenticateWithRedirect","reload","sendEmailVerification","unlink","providerId","updateEmail","newEmail","updatePassword","updatePhoneNumber","updateProfile","displayName","photoURL","photoUrl","verifyBeforeUpdateEmail","getAdditionalUserInfo","userCredential","additionalUserInfo","getCustomAuthDomain"],"sources":["C:/Users/ACER/Documents/Capstone/node_modules/@react-native-firebase/auth/lib/modular/index.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\n/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getApp } from '@react-native-firebase/app';\n\n/**\n * @typedef {import('@firebase/app-types').FirebaseApp} FirebaseApp\n * @typedef {import('..').FirebaseAuthTypes} FirebaseAuthTypes\n * @typedef {import('..').FirebaseAuthTypes.Module} Auth\n * @typedef {import('..').FirebaseAuthTypes.CallbackOrObserver} CallbackOrObserver\n * @typedef {import('..').FirebaseAuthTypes.AuthListenerCallback} AuthListenerCallback\n * @typedef {import('..').FirebaseAuthTypes.ActionCodeInfo} ActionCodeInfo\n * @typedef {import('..').FirebaseAuthTypes.UserCredential} UserCredential\n * @typedef {import('..').FirebaseAuthTypes.MultiFactorError} MultiFactorError\n * @typedef {import('..').FirebaseAuthTypes.MultiFactorUser} MultiFactorUser\n * @typedef {import('..').FirebaseAuthTypes.MultiFactorResolver} MultiFactorResolver\n * @typedef {import('..').FirebaseAuthTypes.ConfirmationResult} ConfirmationResult\n * @typedef {import('..').FirebaseAuthTypes.AuthCredential} AuthCredential\n * @typedef {import('..').FirebaseAuthTypes.AuthProvider} AuthProvider\n * @typedef {import('..').FirebaseAuthTypes.PhoneAuthListener} PhoneAuthListener\n * @typedef {import('..').FirebaseAuthTypes.ActionCodeSettings} ActionCodeSettings\n * @typedef {import('..').FirebaseAuthTypes.User} User\n * @typedef {import('..').FirebaseAuthTypes.IdTokenResult} IdTokenResult\n * @typedef {import('..').FirebaseAuthTypes.AdditionalUserInfo} AdditionalUserInfo\n * @typedef {import('..').FirebaseAuthTypes.ActionCodeURL} ActionCodeURL\n * @typedef {import('..').FirebaseAuthTypes.ApplicationVerifier} ApplicationVerifier\n */\n\n/**\n * Returns the Auth instance associated with the provided FirebaseApp.\n * @param {FirebaseApp} [app] - The Firebase app instance.\n * @returns {Auth}\n */\nexport function getAuth(app) {\n  if (app) {\n    return getApp(app.name).auth();\n  }\n  return getApp().auth();\n}\n\n/**\n * This function allows more control over the Auth instance than getAuth().\n * @param {FirebaseApp} app - The Firebase app instance.\n * @param {any} [deps] - Optional. Dependencies for the Auth instance.\n * @returns {Auth}\n */\nexport function initializeAuth(app, deps) {\n  if (app) {\n    return getApp(app.name).auth();\n  }\n  return getApp().auth();\n}\n\n/**\n * Applies a verification code sent to the user by email or other out-of-band mechanism.\n * @param {Auth} auth - The Auth instance.\n * @param {string} oobCode - The out-of-band code sent to the user.\n * @returns {Promise<void>}\n */\nexport async function applyActionCode(auth, oobCode) {\n  return auth.applyActionCode(oobCode);\n}\n\n/**\n * Adds a blocking callback that runs before an auth state change sets a new user.\n * @param {Auth} auth - The Auth instance.\n * @param {(user: User | null) => void} callback - A callback function to run before the auth state changes.\n * @param {() => void} [onAbort] - Optional. A callback function to run if the operation is aborted.\n */\nexport function beforeAuthStateChanged(auth, callback, onAbort) {\n  throw new Error('beforeAuthStateChanged is unsupported by the native Firebase SDKs');\n}\n\n/**\n * Checks a verification code sent to the user by email or other out-of-band mechanism.\n * @param {Auth} auth - The Auth instance.\n * @param {string} oobCode - The out-of-band code sent to the user.\n * @returns {Promise<ActionCodeInfo>}\n */\nexport async function checkActionCode(auth, oobCode) {\n  return auth.checkActionCode(oobCode);\n}\n\n/**\n * Completes the password reset process, given a confirmation code and new password.\n * @param {Auth} auth - The Auth instance.\n * @param {string} oobCode - The out-of-band code sent to the user.\n * @param {string} newPassword - The new password.\n * @returns {Promise<void>}\n */\nexport async function confirmPasswordReset(auth, oobCode, newPassword) {\n  return auth.confirmPasswordReset(oobCode, newPassword);\n}\n\n/**\n * Changes the Auth instance to communicate with the Firebase Auth Emulator, instead of production Firebase Auth services.\n * @param {Auth} auth - The Auth instance.\n * @param {string} url - The URL of the Firebase Auth Emulator.\n * @param {{ disableWarnings: boolean }} [options] - Optional. Options for the emulator connection.\n */\nexport function connectAuthEmulator(auth, url, options) {\n  auth.useEmulator(url, options);\n}\n\n/**\n * Creates a new user account associated with the specified email address and password.\n * @param {Auth} auth - The Auth instance.\n * @param {string} email - The user's email address.\n * @param {string} password - The user's password.\n * @returns {Promise<UserCredential>}\n */\nexport async function createUserWithEmailAndPassword(auth, email, password) {\n  return auth.createUserWithEmailAndPassword(email, password);\n}\n\n/**\n * Gets the list of possible sign in methods for the given email address.\n * @param {Auth} auth - The Auth instance.\n * @param {string} email - The user's email address.\n * @returns {Promise<string[]>}\n */\nexport async function fetchSignInMethodsForEmail(auth, email) {\n  return auth.fetchSignInMethodsForEmail(email);\n}\n\n/**\n * Provides a MultiFactorResolver suitable for completion of a multi-factor flow.\n * @param {Auth} auth - The Auth instance.\n * @param {MultiFactorError} error - The multi-factor error.\n * @returns {MultiFactorResolver}\n */\nexport function getMultiFactorResolver(auth, error) {\n  return auth.getMultiFactorResolver(error);\n}\n\n/**\n * Returns a UserCredential from the redirect-based sign-in flow.\n * @param {Auth} auth - The Auth instance.\n * @param {PopupRedirectResolver} [resolver] - Optional. The popup redirect resolver.\n * @returns {Promise<UserCredential | null>}\n */\nexport async function getRedirectResult(auth, resolver) {\n  throw new Error('getRedirectResult is unsupported by the native Firebase SDKs');\n}\n\n/**\n * Checks if an incoming link is a sign-in with email link suitable for signInWithEmailLink().\n * @param {Auth} auth - The Auth instance.\n * @param {string} emailLink - The email link to check.\n * @returns {boolean}\n */\nexport function isSignInWithEmailLink(auth, emailLink) {\n  return auth.isSignInWithEmailLink(emailLink);\n}\n\n/**\n * Adds an observer for changes to the user's sign-in state.\n * @param {Auth} auth - The Auth instance.\n * @param {CallbackOrObserver<AuthListenerCallback>} nextOrObserver - A callback function or observer for auth state changes.\n * @returns {() => void}\n */\nexport function onAuthStateChanged(auth, nextOrObserver) {\n  return auth.onAuthStateChanged(nextOrObserver);\n}\n\n/**\n * Adds an observer for changes to the signed-in user's ID token.\n * @param {Auth} auth - The Auth instance.\n * @param {CallbackOrObserver<AuthListenerCallback>} nextOrObserver - A callback function or observer for ID token changes.\n * @returns {() => void}\n */\nexport function onIdTokenChanged(auth, nextOrObserver) {\n  return auth.onIdTokenChanged(nextOrObserver);\n}\n\n/**\n * Sends a password reset email to the given email address.\n * @param {Auth} auth - The Auth instance.\n * @param {string} email - The user's email address.\n * @param {ActionCodeSettings} [actionCodeSettings] - Optional. Action code settings.\n * @returns {Promise<void>}\n */\nexport async function sendPasswordResetEmail(auth, email, actionCodeSettings) {\n  return auth.sendPasswordResetEmail(email, actionCodeSettings);\n}\n\n/**\n * Sends a sign-in email link to the user with the specified email.\n * @param {Auth} auth - The Auth instance.\n * @param {string} email - The user's email address.\n * @param {ActionCodeSettings} [actionCodeSettings] - Optional. Action code settings.\n * @returns {Promise<void>}\n */\nexport async function sendSignInLinkToEmail(auth, email, actionCodeSettings) {\n  return auth.sendSignInLinkToEmail(email, actionCodeSettings);\n}\n\n/**\n * Changes the type of persistence on the Auth instance for the currently saved Auth session and applies this type of persistence for future sign-in requests, including sign-in with redirect requests.\n * @param {Auth} auth - The Auth instance.\n * @param {Persistence} persistence - The persistence type.\n * @returns {Promise<void>}\n */\nexport async function setPersistence(auth, persistence) {\n  throw new Error('setPersistence is unsupported by the native Firebase SDKs');\n}\n\n/**\n * Asynchronously signs in as an anonymous user.\n * @param {Auth} auth - The Auth instance.\n * @returns {Promise<UserCredential>}\n */\nexport async function signInAnonymously(auth) {\n  return auth.signInAnonymously();\n}\n\n/**\n * Asynchronously signs in with the given credentials.\n * @param {Auth} auth - The Auth instance.\n * @param {AuthCredential} credential - The auth credentials.\n * @returns {Promise<UserCredential>}\n */\nexport async function signInWithCredential(auth, credential) {\n  return auth.signInWithCredential(credential);\n}\n\n/**\n * Asynchronously signs in using a custom token.\n * @param {Auth} auth - The Auth instance.\n * @param {string} customToken - The custom token.\n * @returns {Promise<UserCredential>}\n */\nexport async function signInWithCustomToken(auth, customToken) {\n  return auth.signInWithCustomToken(customToken);\n}\n\n/**\n * Asynchronously signs in using an email and password.\n * @param {Auth} auth - The Auth instance.\n * @param {string} email - The user's email address.\n * @param {string} password - The user's password.\n * @returns {Promise<UserCredential>}\n */\nexport async function signInWithEmailAndPassword(auth, email, password) {\n  return auth.signInWithEmailAndPassword(email, password);\n}\n\n/**\n * Asynchronously signs in using an email and sign-in email link.\n * @param {Auth} auth - The Auth instance.\n * @param {string} email - The user's email address.\n * @param {string} emailLink - The email link.\n * @returns {Promise<UserCredential>}\n */\nexport async function signInWithEmailLink(auth, email, emailLink) {\n  return auth.signInWithEmailLink(email, emailLink);\n}\n\n/**\n * Asynchronously signs in using a phone number.\n * @param {Auth} auth - The Auth instance.\n * @param {string} phoneNumber - The user's phone number.\n * @param {ApplicationVerifier} appVerifier - The application verifier.\n * @returns {Promise<ConfirmationResult>}\n */\nexport async function signInWithPhoneNumber(auth, phoneNumber, appVerifier) {\n  return auth.signInWithPhoneNumber(phoneNumber, appVerifier);\n}\n\n/**\n * Asynchronously verifies a phone number.\n * @param {Auth} auth - The Auth instance.\n * @param {string} phoneNumber - The user's phone number.\n * @param {number | boolean} autoVerifyTimeoutOrForceResend - The auto verify timeout or force resend flag.\n * @param {boolean} [forceResend] - Optional. Whether to force resend.\n * @returns {PhoneAuthListener}\n */\nexport function verifyPhoneNumber(auth, phoneNumber, autoVerifyTimeoutOrForceResend, forceResend) {\n  return auth.verifyPhoneNumber(phoneNumber, autoVerifyTimeoutOrForceResend, forceResend);\n}\n\n/**\n * Authenticates a Firebase client using a popup-based OAuth authentication flow.\n * @param {Auth} auth - The Auth instance.\n * @param {AuthProvider} provider - The auth provider.\n * @param {PopupRedirectResolver} [resolver] - Optional. The popup redirect resolver.\n * @returns {Promise<UserCredential>}\n */\nexport async function signInWithPopup(auth, provider, resolver) {\n  return auth.signInWithPopup(provider, resolver);\n}\n\n/**\n * Authenticates a Firebase client using a full-page redirect flow.\n * @param {Auth} auth - The Auth instance.\n * @param {AuthProvider} provider - The auth provider.\n * @param {PopupRedirectResolver} [resolver] - Optional. The popup redirect resolver.\n * @returns {Promise<void>}\n */\nexport async function signInWithRedirect(auth, provider, resolver) {\n  return auth.signInWithRedirect(provider, resolver);\n}\n\n/**\n * Signs out the current user.\n * @param {Auth} auth - The Auth instance.\n * @returns {Promise<void>}\n */\nexport async function signOut(auth) {\n  return auth.signOut();\n}\n\n/**\n * Asynchronously sets the provided user as Auth.currentUser on the Auth instance.\n * @param {Auth} auth - The Auth instance.\n * @param {User} user - The user to set as the current user.\n * @returns {Promise<void>}\n */\nexport async function updateCurrentUser(auth, user) {\n  throw new Error('updateCurrentUser is unsupported by the native Firebase SDKs');\n}\n\n/**\n * Sets the current language to the default device/browser preference.\n * @param {Auth} auth - The Auth instance.\n */\nexport function useDeviceLanguage(auth) {\n  throw new Error('useDeviceLanguage is unsupported by the native Firebase SDKs');\n}\n\n/**\n * Sets the current language to the default device/browser preference.\n * @param {Auth} auth - The Auth instance.\n * @param {string} userAccessGroup - The user access group.\n * @returns {Promise<void>}\n */\nexport function useUserAccessGroup(auth, userAccessGroup) {\n  return auth.useUserAccessGroup(userAccessGroup);\n}\n\n/**\n * Verifies the password reset code sent to the user by email or other out-of-band mechanism.\n * @param {Auth} auth - The Auth instance.\n * @param {string} code - The password reset code.\n * @returns {Promise<string>}\n */\nexport async function verifyPasswordResetCode(auth, code) {\n  return auth.verifyPasswordResetCode(code);\n}\n\n/**\n * Parses the email action link string and returns an ActionCodeURL if the link is valid, otherwise returns null.\n * @param {string} link - The email action link string.\n * @returns {ActionCodeURL | null}\n */\nexport function parseActionCodeURL(link) {\n  throw new Error('parseActionCodeURL is unsupported by the native Firebase SDKs');\n}\n\n/**\n * Deletes and signs out the user.\n * @param {User} user - The user to delete.\n * @returns {Promise<void>}\n */\nexport async function deleteUser(user) {\n  return user.delete();\n}\n\n/**\n * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.\n * @param {User} user - The user to get the token for.\n * @param {boolean} [forceRefresh] - Optional. Whether to force refresh the token.\n * @returns {Promise<string>}\n */\nexport async function getIdToken(user, forceRefresh) {\n  return user.getIdToken(forceRefresh);\n}\n\n/**\n * Returns a deserialized JSON Web Token (JWT) used to identify the user to a Firebase service.\n * @param {User} user - The user to get the token result for.\n * @param {boolean} [forceRefresh] - Optional. Whether to force refresh the token.\n * @returns {Promise<IdTokenResult>}\n */\nexport async function getIdTokenResult(user, forceRefresh) {\n  return user.getIdTokenResult(forceRefresh);\n}\n\n/**\n * Links the user account with the given credentials.\n * @param {User} user - The user to link the credentials with.\n * @param {AuthCredential} credential - The auth credentials.\n * @returns {Promise<UserCredential>}\n */\nexport async function linkWithCredential(user, credential) {\n  return user.linkWithCredential(credential);\n}\n\n/**\n * Links the user account with the given phone number.\n * @param {User} user - The user to link the phone number with.\n * @param {string} phoneNumber - The phone number.\n * @param {ApplicationVerifier} appVerifier - The application verifier.\n * @returns {Promise<ConfirmationResult>}\n */\nexport async function linkWithPhoneNumber(user, phoneNumber, appVerifier) {\n  throw new Error('linkWithPhoneNumber is unsupported by the native Firebase SDKs');\n}\n\n/**\n * Links the authenticated provider to the user account using a pop-up based OAuth flow.\n * @param {User} user - The user to link the provider with.\n * @param {AuthProvider} provider - The auth provider.\n * @param {PopupRedirectResolver} [resolver] - Optional. The popup redirect resolver.\n * @returns {Promise<UserCredential>}\n */\nexport async function linkWithPopup(user, provider, resolver) {\n  return user.linkWithPopup(provider, resolver);\n}\n\n/**\n * Links the OAuthProvider to the user account using a full-page redirect flow.\n * @param {User} user - The user to link the provider with.\n * @param {AuthProvider} provider - The auth provider.\n * @param {PopupRedirectResolver} [resolver] - Optional. The popup redirect resolver.\n * @returns {Promise<void>}\n */\nexport async function linkWithRedirect(user, provider, resolver) {\n  return user.linkWithRedirect(provider, resolver);\n}\n\n/**\n * The MultiFactorUser corresponding to the user.\n * @param {User} user - The user to get the multi-factor user for.\n * @returns {MultiFactorUser}\n */\nexport function multiFactor(user) {\n  return user._auth.multiFactor(user);\n}\n\n/**\n * Re-authenticates a user using a fresh credential.\n * @param {User} user - The user to re-authenticate.\n * @param {AuthCredential} credential - The auth credentials.\n * @returns {Promise<UserCredential>}\n */\nexport async function reauthenticateWithCredential(user, credential) {\n  return user.reauthenticateWithCredential(credential);\n}\n\n/**\n * Re-authenticates a user using a fresh phone credential.\n * @param {User} user - The user to re-authenticate.\n * @param {string} phoneNumber - The phone number.\n * @param {ApplicationVerifier} appVerifier - The application verifier.\n * @returns {Promise<ConfirmationResult>}\n */\nexport async function reauthenticateWithPhoneNumber(user, phoneNumber, appVerifier) {\n  throw new Error('reauthenticateWithPhoneNumber is unsupported by the native Firebase SDKs');\n}\n\n/**\n * Re-authenticate a user with a federated authentication provider (Microsoft, Yahoo). For native platforms, this will open a browser window.\n * @param {User} user - The user to re-authenticate.\n * @param {AuthProvider} provider - The auth provider.\n * @param {PopupRedirectResolver} [resolver] - Optional. The popup redirect resolver. Web only.\n * @returns {Promise<UserCredential>}\n */\nexport async function reauthenticateWithPopup(user, provider, resolver) {\n  return user.reauthenticateWithPopup(provider, resolver);\n}\n\n/**\n * Re-authenticate a user with a federated authentication provider (Microsoft, Yahoo). For native platforms, this will open a browser window.\n * @param {User} user - The user to re-authenticate.\n * @param {AuthProvider} provider - The auth provider.\n * @param {PopupRedirectResolver} [resolver] - Optional. The popup redirect resolver. Web only.\n * @returns {Promise<UserCredential>}\n */\nexport async function reauthenticateWithRedirect(user, provider, resolver) {\n  return user.reauthenticateWithRedirect(provider, resolver);\n}\n\n/**\n * Reloads user account data, if signed in.\n * @param {User} user - The user to reload data for.\n * @returns {Promise<void>}\n */\nexport async function reload(user) {\n  return user.reload();\n}\n\n/**\n * Sends a verification email to a user.\n * @param {User} user - The user to send the email to.\n * @param {ActionCodeSettings} [actionCodeSettings] - Optional. Action code settings.\n * @returns {Promise<void>}\n */\nexport async function sendEmailVerification(user, actionCodeSettings) {\n  return user.sendEmailVerification(actionCodeSettings);\n}\n\n/**\n * Unlinks a provider from a user account.\n * @param {User} user - The user to unlink the provider from.\n * @param {string} providerId - The provider ID.\n * @returns {Promise<User>}\n */\nexport async function unlink(user, providerId) {\n  return user.unlink(providerId);\n}\n\n/**\n * Updates the user's email address.\n * @param {User} user - The user to update the email for.\n * @param {string} newEmail - The new email address.\n * @returns {Promise<void>}\n */\nexport async function updateEmail(user, newEmail) {\n  return user.updateEmail(newEmail);\n}\n\n/**\n * Updates the user's password.\n * @param {User} user - The user to update the password for.\n * @param {string} newPassword - The new password.\n * @returns {Promise<void>}\n */\nexport async function updatePassword(user, newPassword) {\n  return user.updatePassword(newPassword);\n}\n\n/**\n * Updates the user's phone number.\n * @param {User} user - The user to update the phone number for.\n * @param {AuthCredential} credential - The auth credentials.\n * @returns {Promise<void>}\n */\nexport async function updatePhoneNumber(user, credential) {\n  return user.updatePhoneNumber(credential);\n}\n\n/**\n * Updates a user's profile data.\n * @param {User} user - The user to update the profile for.\n * @param {{ displayName?: string | null, photoURL?: string | null }} profile - An object containing the profile data to update.\n * @returns {Promise<void>}\n */\nexport async function updateProfile(user, { displayName, photoURL: photoUrl }) {\n  return user.updateProfile({ displayName, photoURL: photoUrl });\n}\n\n/**\n * Sends a verification email to a new email address.\n * @param {User} user - The user to send the email to.\n * @param {string} newEmail - The new email address.\n * @param {ActionCodeSettings} [actionCodeSettings] - Optional. Action code settings.\n * @returns {Promise<void>}\n */\nexport async function verifyBeforeUpdateEmail(user, newEmail, actionCodeSettings) {\n  return user.verifyBeforeUpdateEmail(newEmail, actionCodeSettings);\n}\n\n/**\n * Extracts provider specific AdditionalUserInfo for the given credential.\n * @param {UserCredential} userCredential - The user credential.\n * @returns {AdditionalUserInfo | null}\n */\nexport function getAdditionalUserInfo(userCredential) {\n  return userCredential.additionalUserInfo;\n}\n\n/**\n * Returns the custom auth domain for the auth instance.\n * @param {Auth} auth - The Auth instance.\n * @returns {Promise<string>}\n */\nexport function getCustomAuthDomain(auth) {\n  return auth.getCustomAuthDomain();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}