{"ast":null,"code":"import { isObject, isString, isUndefined, isBoolean } from '@react-native-firebase/app/lib/common';\nimport { warnDynamicLink } from './utils';\nexport default class User {\n  constructor(auth, user) {\n    this._auth = auth;\n    this._user = user;\n  }\n  get displayName() {\n    return this._user.displayName || null;\n  }\n  get email() {\n    return this._user.email || null;\n  }\n  get emailVerified() {\n    return this._user.emailVerified || false;\n  }\n  get isAnonymous() {\n    return this._user.isAnonymous || false;\n  }\n  get metadata() {\n    const {\n      metadata\n    } = this._user;\n    return {\n      lastSignInTime: new Date(metadata.lastSignInTime).toISOString(),\n      creationTime: new Date(metadata.creationTime).toISOString()\n    };\n  }\n  get multiFactor() {\n    return this._user.multiFactor || null;\n  }\n  get phoneNumber() {\n    return this._user.phoneNumber || null;\n  }\n  get tenantId() {\n    return this._user.tenantId || null;\n  }\n  get photoURL() {\n    return this._user.photoURL || null;\n  }\n  get providerData() {\n    return this._user.providerData;\n  }\n  get providerId() {\n    return this._user.providerId;\n  }\n  get uid() {\n    return this._user.uid;\n  }\n  delete() {\n    return this._auth.native.delete().then(() => {\n      this._auth._setUser();\n    });\n  }\n  getIdToken(forceRefresh = false) {\n    return this._auth.native.getIdToken(forceRefresh);\n  }\n  getIdTokenResult(forceRefresh = false) {\n    return this._auth.native.getIdTokenResult(forceRefresh);\n  }\n  linkWithCredential(credential) {\n    return this._auth.native.linkWithCredential(credential.providerId, credential.token, credential.secret).then(userCredential => this._auth._setUserCredential(userCredential));\n  }\n  linkWithPopup(provider) {\n    return this.linkWithRedirect(provider);\n  }\n  linkWithRedirect(provider) {\n    return this._auth.native.linkWithProvider(provider.toObject()).then(userCredential => this._auth._setUserCredential(userCredential));\n  }\n  reauthenticateWithCredential(credential) {\n    return this._auth.native.reauthenticateWithCredential(credential.providerId, credential.token, credential.secret).then(userCredential => this._auth._setUserCredential(userCredential));\n  }\n  reauthenticateWithPopup(provider) {\n    return this.reauthenticateWithRedirect(provider);\n  }\n  reauthenticateWithRedirect(provider) {\n    return this._auth.native.reauthenticateWithProvider(provider.toObject()).then(userCredential => this._auth._setUserCredential(userCredential));\n  }\n  reload() {\n    return this._auth.native.reload().then(user => {\n      this._auth._setUser(user);\n    });\n  }\n  sendEmailVerification(actionCodeSettings) {\n    warnDynamicLink(actionCodeSettings);\n    if (isObject(actionCodeSettings)) {\n      if (!isString(actionCodeSettings.url)) {\n        throw new Error(\"firebase.auth.User.sendEmailVerification(*) 'actionCodeSettings.url' expected a string value.\");\n      }\n      if (!isUndefined(actionCodeSettings.dynamicLinkDomain) && !isString(actionCodeSettings.dynamicLinkDomain)) {\n        throw new Error(\"firebase.auth.User.sendEmailVerification(*) 'actionCodeSettings.dynamicLinkDomain' expected a string value.\");\n      }\n      if (!isUndefined(actionCodeSettings.linkDomain) && !isString(actionCodeSettings.linkDomain)) {\n        throw new Error(\"firebase.auth.User.sendEmailVerification(*) 'actionCodeSettings.linkDomain' expected a string value.\");\n      }\n      if (!isUndefined(actionCodeSettings.handleCodeInApp) && !isBoolean(actionCodeSettings.handleCodeInApp)) {\n        throw new Error(\"firebase.auth.User.sendEmailVerification(*) 'actionCodeSettings.handleCodeInApp' expected a boolean value.\");\n      }\n      if (!isUndefined(actionCodeSettings.iOS)) {\n        if (!isObject(actionCodeSettings.iOS)) {\n          throw new Error(\"firebase.auth.User.sendEmailVerification(*) 'actionCodeSettings.iOS' expected an object value.\");\n        }\n        if (!isString(actionCodeSettings.iOS.bundleId)) {\n          throw new Error(\"firebase.auth.User.sendEmailVerification(*) 'actionCodeSettings.iOS.bundleId' expected a string value.\");\n        }\n      }\n      if (!isUndefined(actionCodeSettings.android)) {\n        if (!isObject(actionCodeSettings.android)) {\n          throw new Error(\"firebase.auth.User.sendEmailVerification(*) 'actionCodeSettings.android' expected an object value.\");\n        }\n        if (!isString(actionCodeSettings.android.packageName)) {\n          throw new Error(\"firebase.auth.User.sendEmailVerification(*) 'actionCodeSettings.android.packageName' expected a string value.\");\n        }\n        if (!isUndefined(actionCodeSettings.android.installApp) && !isBoolean(actionCodeSettings.android.installApp)) {\n          throw new Error(\"firebase.auth.User.sendEmailVerification(*) 'actionCodeSettings.android.installApp' expected a boolean value.\");\n        }\n        if (!isUndefined(actionCodeSettings.android.minimumVersion) && !isString(actionCodeSettings.android.minimumVersion)) {\n          throw new Error(\"firebase.auth.User.sendEmailVerification(*) 'actionCodeSettings.android.minimumVersion' expected a string value.\");\n        }\n      }\n    }\n    return this._auth.native.sendEmailVerification(actionCodeSettings).then(user => {\n      this._auth._setUser(user);\n    });\n  }\n  toJSON() {\n    return Object.assign({}, this._user);\n  }\n  unlink(providerId) {\n    return this._auth.native.unlink(providerId).then(user => this._auth._setUser(user));\n  }\n  updateEmail(email) {\n    return this._auth.native.updateEmail(email).then(user => {\n      this._auth._setUser(user);\n    });\n  }\n  updatePassword(password) {\n    return this._auth.native.updatePassword(password).then(user => {\n      this._auth._setUser(user);\n    });\n  }\n  updatePhoneNumber(credential) {\n    return this._auth.native.updatePhoneNumber(credential.providerId, credential.token, credential.secret).then(user => {\n      this._auth._setUser(user);\n    });\n  }\n  updateProfile(updates) {\n    return this._auth.native.updateProfile(updates).then(user => {\n      this._auth._setUser(user);\n    });\n  }\n  verifyBeforeUpdateEmail(newEmail, actionCodeSettings) {\n    warnDynamicLink(actionCodeSettings);\n    if (!isString(newEmail)) {\n      throw new Error(\"firebase.auth.User.verifyBeforeUpdateEmail(*) 'newEmail' expected a string value.\");\n    }\n    if (isObject(actionCodeSettings)) {\n      if (!isString(actionCodeSettings.url)) {\n        throw new Error(\"firebase.auth.User.verifyBeforeUpdateEmail(_, *) 'actionCodeSettings.url' expected a string value.\");\n      }\n      if (!isUndefined(actionCodeSettings.dynamicLinkDomain) && !isString(actionCodeSettings.dynamicLinkDomain)) {\n        throw new Error(\"firebase.auth.User.verifyBeforeUpdateEmail(_, *) 'actionCodeSettings.dynamicLinkDomain' expected a string value.\");\n      }\n      if (!isUndefined(actionCodeSettings.linkDomain) && !isString(actionCodeSettings.linkDomain)) {\n        throw new Error(\"firebase.auth.User.verifyBeforeUpdateEmail(_, *) 'actionCodeSettings.linkDomain' expected a string value.\");\n      }\n      if (!isUndefined(actionCodeSettings.handleCodeInApp) && !isBoolean(actionCodeSettings.handleCodeInApp)) {\n        throw new Error(\"firebase.auth.User.verifyBeforeUpdateEmail(_, *) 'actionCodeSettings.handleCodeInApp' expected a boolean value.\");\n      }\n      if (!isUndefined(actionCodeSettings.iOS)) {\n        if (!isObject(actionCodeSettings.iOS)) {\n          throw new Error(\"firebase.auth.User.verifyBeforeUpdateEmail(_, *) 'actionCodeSettings.iOS' expected an object value.\");\n        }\n        if (!isString(actionCodeSettings.iOS.bundleId)) {\n          throw new Error(\"firebase.auth.User.verifyBeforeUpdateEmail(_, *) 'actionCodeSettings.iOS.bundleId' expected a string value.\");\n        }\n      }\n      if (!isUndefined(actionCodeSettings.android)) {\n        if (!isObject(actionCodeSettings.android)) {\n          throw new Error(\"firebase.auth.User.verifyBeforeUpdateEmail(_, *) 'actionCodeSettings.android' expected an object value.\");\n        }\n        if (!isString(actionCodeSettings.android.packageName)) {\n          throw new Error(\"firebase.auth.User.verifyBeforeUpdateEmail(_, *) 'actionCodeSettings.android.packageName' expected a string value.\");\n        }\n        if (!isUndefined(actionCodeSettings.android.installApp) && !isBoolean(actionCodeSettings.android.installApp)) {\n          throw new Error(\"firebase.auth.User.verifyBeforeUpdateEmail(_, *) 'actionCodeSettings.android.installApp' expected a boolean value.\");\n        }\n        if (!isUndefined(actionCodeSettings.android.minimumVersion) && !isString(actionCodeSettings.android.minimumVersion)) {\n          throw new Error(\"firebase.auth.User.verifyBeforeUpdateEmail(_, *) 'actionCodeSettings.android.minimumVersion' expected a string value.\");\n        }\n      }\n    }\n    return this._auth.native.verifyBeforeUpdateEmail(newEmail, actionCodeSettings).then(user => {\n      this._auth._setUser(user);\n    });\n  }\n  linkWithPhoneNumber() {\n    throw new Error('firebase.auth.User.linkWithPhoneNumber() is unsupported by the native Firebase SDKs.');\n  }\n  reauthenticateWithPhoneNumber() {\n    throw new Error('firebase.auth.User.reauthenticateWithPhoneNumber() is unsupported by the native Firebase SDKs.');\n  }\n  get refreshToken() {\n    throw new Error('firebase.auth.User.refreshToken is unsupported by the native Firebase SDKs.');\n  }\n}","map":{"version":3,"names":["isObject","isString","isUndefined","isBoolean","warnDynamicLink","User","constructor","auth","user","_auth","_user","displayName","email","emailVerified","isAnonymous","metadata","lastSignInTime","Date","toISOString","creationTime","multiFactor","phoneNumber","tenantId","photoURL","providerData","providerId","uid","delete","native","then","_setUser","getIdToken","forceRefresh","getIdTokenResult","linkWithCredential","credential","token","secret","userCredential","_setUserCredential","linkWithPopup","provider","linkWithRedirect","linkWithProvider","toObject","reauthenticateWithCredential","reauthenticateWithPopup","reauthenticateWithRedirect","reauthenticateWithProvider","reload","sendEmailVerification","actionCodeSettings","url","Error","dynamicLinkDomain","linkDomain","handleCodeInApp","iOS","bundleId","android","packageName","installApp","minimumVersion","toJSON","Object","assign","unlink","updateEmail","updatePassword","password","updatePhoneNumber","updateProfile","updates","verifyBeforeUpdateEmail","newEmail","linkWithPhoneNumber","reauthenticateWithPhoneNumber","refreshToken"],"sources":["C:/Users/ACER/Documents/Capstone/node_modules/@react-native-firebase/auth/lib/User.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isObject, isString, isUndefined, isBoolean } from '@react-native-firebase/app/lib/common';\nimport { warnDynamicLink } from './utils';\n\nexport default class User {\n  constructor(auth, user) {\n    this._auth = auth;\n    this._user = user;\n  }\n\n  get displayName() {\n    return this._user.displayName || null;\n  }\n\n  get email() {\n    return this._user.email || null;\n  }\n\n  get emailVerified() {\n    return this._user.emailVerified || false;\n  }\n\n  get isAnonymous() {\n    return this._user.isAnonymous || false;\n  }\n\n  get metadata() {\n    const { metadata } = this._user;\n\n    return {\n      lastSignInTime: new Date(metadata.lastSignInTime).toISOString(),\n      creationTime: new Date(metadata.creationTime).toISOString(),\n    };\n  }\n\n  get multiFactor() {\n    return this._user.multiFactor || null;\n  }\n\n  get phoneNumber() {\n    return this._user.phoneNumber || null;\n  }\n\n  get tenantId() {\n    return this._user.tenantId || null;\n  }\n\n  get photoURL() {\n    return this._user.photoURL || null;\n  }\n\n  get providerData() {\n    return this._user.providerData;\n  }\n\n  get providerId() {\n    return this._user.providerId;\n  }\n\n  get uid() {\n    return this._user.uid;\n  }\n\n  delete() {\n    return this._auth.native.delete().then(() => {\n      this._auth._setUser();\n    });\n  }\n\n  getIdToken(forceRefresh = false) {\n    return this._auth.native.getIdToken(forceRefresh);\n  }\n\n  getIdTokenResult(forceRefresh = false) {\n    return this._auth.native.getIdTokenResult(forceRefresh);\n  }\n\n  linkWithCredential(credential) {\n    return this._auth.native\n      .linkWithCredential(credential.providerId, credential.token, credential.secret)\n      .then(userCredential => this._auth._setUserCredential(userCredential));\n  }\n\n  linkWithPopup(provider) {\n    // call through to linkWithRedirect for shared implementation\n    return this.linkWithRedirect(provider);\n  }\n\n  linkWithRedirect(provider) {\n    return this._auth.native\n      .linkWithProvider(provider.toObject())\n      .then(userCredential => this._auth._setUserCredential(userCredential));\n  }\n\n  reauthenticateWithCredential(credential) {\n    return this._auth.native\n      .reauthenticateWithCredential(credential.providerId, credential.token, credential.secret)\n      .then(userCredential => this._auth._setUserCredential(userCredential));\n  }\n\n  reauthenticateWithPopup(provider) {\n    // call through to reauthenticateWithRedirect for shared implementation\n    return this.reauthenticateWithRedirect(provider);\n  }\n\n  reauthenticateWithRedirect(provider) {\n    return this._auth.native\n      .reauthenticateWithProvider(provider.toObject())\n      .then(userCredential => this._auth._setUserCredential(userCredential));\n  }\n\n  reload() {\n    return this._auth.native.reload().then(user => {\n      this._auth._setUser(user);\n    });\n  }\n\n  sendEmailVerification(actionCodeSettings) {\n    warnDynamicLink(actionCodeSettings);\n    if (isObject(actionCodeSettings)) {\n      if (!isString(actionCodeSettings.url)) {\n        throw new Error(\n          \"firebase.auth.User.sendEmailVerification(*) 'actionCodeSettings.url' expected a string value.\",\n        );\n      }\n\n      if (\n        !isUndefined(actionCodeSettings.dynamicLinkDomain) &&\n        !isString(actionCodeSettings.dynamicLinkDomain)\n      ) {\n        throw new Error(\n          \"firebase.auth.User.sendEmailVerification(*) 'actionCodeSettings.dynamicLinkDomain' expected a string value.\",\n        );\n      }\n\n      if (!isUndefined(actionCodeSettings.linkDomain) && !isString(actionCodeSettings.linkDomain)) {\n        throw new Error(\n          \"firebase.auth.User.sendEmailVerification(*) 'actionCodeSettings.linkDomain' expected a string value.\",\n        );\n      }\n\n      if (\n        !isUndefined(actionCodeSettings.handleCodeInApp) &&\n        !isBoolean(actionCodeSettings.handleCodeInApp)\n      ) {\n        throw new Error(\n          \"firebase.auth.User.sendEmailVerification(*) 'actionCodeSettings.handleCodeInApp' expected a boolean value.\",\n        );\n      }\n\n      if (!isUndefined(actionCodeSettings.iOS)) {\n        if (!isObject(actionCodeSettings.iOS)) {\n          throw new Error(\n            \"firebase.auth.User.sendEmailVerification(*) 'actionCodeSettings.iOS' expected an object value.\",\n          );\n        }\n        if (!isString(actionCodeSettings.iOS.bundleId)) {\n          throw new Error(\n            \"firebase.auth.User.sendEmailVerification(*) 'actionCodeSettings.iOS.bundleId' expected a string value.\",\n          );\n        }\n      }\n\n      if (!isUndefined(actionCodeSettings.android)) {\n        if (!isObject(actionCodeSettings.android)) {\n          throw new Error(\n            \"firebase.auth.User.sendEmailVerification(*) 'actionCodeSettings.android' expected an object value.\",\n          );\n        }\n        if (!isString(actionCodeSettings.android.packageName)) {\n          throw new Error(\n            \"firebase.auth.User.sendEmailVerification(*) 'actionCodeSettings.android.packageName' expected a string value.\",\n          );\n        }\n\n        if (\n          !isUndefined(actionCodeSettings.android.installApp) &&\n          !isBoolean(actionCodeSettings.android.installApp)\n        ) {\n          throw new Error(\n            \"firebase.auth.User.sendEmailVerification(*) 'actionCodeSettings.android.installApp' expected a boolean value.\",\n          );\n        }\n\n        if (\n          !isUndefined(actionCodeSettings.android.minimumVersion) &&\n          !isString(actionCodeSettings.android.minimumVersion)\n        ) {\n          throw new Error(\n            \"firebase.auth.User.sendEmailVerification(*) 'actionCodeSettings.android.minimumVersion' expected a string value.\",\n          );\n        }\n      }\n    }\n\n    return this._auth.native.sendEmailVerification(actionCodeSettings).then(user => {\n      this._auth._setUser(user);\n    });\n  }\n\n  toJSON() {\n    return Object.assign({}, this._user);\n  }\n\n  unlink(providerId) {\n    return this._auth.native.unlink(providerId).then(user => this._auth._setUser(user));\n  }\n\n  updateEmail(email) {\n    return this._auth.native.updateEmail(email).then(user => {\n      this._auth._setUser(user);\n    });\n  }\n\n  updatePassword(password) {\n    return this._auth.native.updatePassword(password).then(user => {\n      this._auth._setUser(user);\n    });\n  }\n\n  updatePhoneNumber(credential) {\n    return this._auth.native\n      .updatePhoneNumber(credential.providerId, credential.token, credential.secret)\n      .then(user => {\n        this._auth._setUser(user);\n      });\n  }\n\n  updateProfile(updates) {\n    return this._auth.native.updateProfile(updates).then(user => {\n      this._auth._setUser(user);\n    });\n  }\n\n  verifyBeforeUpdateEmail(newEmail, actionCodeSettings) {\n    warnDynamicLink(actionCodeSettings);\n    if (!isString(newEmail)) {\n      throw new Error(\n        \"firebase.auth.User.verifyBeforeUpdateEmail(*) 'newEmail' expected a string value.\",\n      );\n    }\n\n    if (isObject(actionCodeSettings)) {\n      if (!isString(actionCodeSettings.url)) {\n        throw new Error(\n          \"firebase.auth.User.verifyBeforeUpdateEmail(_, *) 'actionCodeSettings.url' expected a string value.\",\n        );\n      }\n\n      if (\n        !isUndefined(actionCodeSettings.dynamicLinkDomain) &&\n        !isString(actionCodeSettings.dynamicLinkDomain)\n      ) {\n        throw new Error(\n          \"firebase.auth.User.verifyBeforeUpdateEmail(_, *) 'actionCodeSettings.dynamicLinkDomain' expected a string value.\",\n        );\n      }\n\n      if (!isUndefined(actionCodeSettings.linkDomain) && !isString(actionCodeSettings.linkDomain)) {\n        throw new Error(\n          \"firebase.auth.User.verifyBeforeUpdateEmail(_, *) 'actionCodeSettings.linkDomain' expected a string value.\",\n        );\n      }\n\n      if (\n        !isUndefined(actionCodeSettings.handleCodeInApp) &&\n        !isBoolean(actionCodeSettings.handleCodeInApp)\n      ) {\n        throw new Error(\n          \"firebase.auth.User.verifyBeforeUpdateEmail(_, *) 'actionCodeSettings.handleCodeInApp' expected a boolean value.\",\n        );\n      }\n\n      if (!isUndefined(actionCodeSettings.iOS)) {\n        if (!isObject(actionCodeSettings.iOS)) {\n          throw new Error(\n            \"firebase.auth.User.verifyBeforeUpdateEmail(_, *) 'actionCodeSettings.iOS' expected an object value.\",\n          );\n        }\n        if (!isString(actionCodeSettings.iOS.bundleId)) {\n          throw new Error(\n            \"firebase.auth.User.verifyBeforeUpdateEmail(_, *) 'actionCodeSettings.iOS.bundleId' expected a string value.\",\n          );\n        }\n      }\n\n      if (!isUndefined(actionCodeSettings.android)) {\n        if (!isObject(actionCodeSettings.android)) {\n          throw new Error(\n            \"firebase.auth.User.verifyBeforeUpdateEmail(_, *) 'actionCodeSettings.android' expected an object value.\",\n          );\n        }\n        if (!isString(actionCodeSettings.android.packageName)) {\n          throw new Error(\n            \"firebase.auth.User.verifyBeforeUpdateEmail(_, *) 'actionCodeSettings.android.packageName' expected a string value.\",\n          );\n        }\n\n        if (\n          !isUndefined(actionCodeSettings.android.installApp) &&\n          !isBoolean(actionCodeSettings.android.installApp)\n        ) {\n          throw new Error(\n            \"firebase.auth.User.verifyBeforeUpdateEmail(_, *) 'actionCodeSettings.android.installApp' expected a boolean value.\",\n          );\n        }\n\n        if (\n          !isUndefined(actionCodeSettings.android.minimumVersion) &&\n          !isString(actionCodeSettings.android.minimumVersion)\n        ) {\n          throw new Error(\n            \"firebase.auth.User.verifyBeforeUpdateEmail(_, *) 'actionCodeSettings.android.minimumVersion' expected a string value.\",\n          );\n        }\n      }\n    }\n\n    return this._auth.native.verifyBeforeUpdateEmail(newEmail, actionCodeSettings).then(user => {\n      this._auth._setUser(user);\n    });\n  }\n\n  /**\n   * KNOWN UNSUPPORTED METHODS\n   */\n\n  linkWithPhoneNumber() {\n    throw new Error(\n      'firebase.auth.User.linkWithPhoneNumber() is unsupported by the native Firebase SDKs.',\n    );\n  }\n\n  reauthenticateWithPhoneNumber() {\n    throw new Error(\n      'firebase.auth.User.reauthenticateWithPhoneNumber() is unsupported by the native Firebase SDKs.',\n    );\n  }\n\n  get refreshToken() {\n    throw new Error('firebase.auth.User.refreshToken is unsupported by the native Firebase SDKs.');\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}